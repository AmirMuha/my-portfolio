# Add date formatting options.
directive @dateformat(formatString: String, locale: String, fromNow: Boolean, difference: String) on FIELD_DEFINITION

# Link to node by foreign-key relation.
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

# Link to File node by relative path.
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

# Proxy resolver from another field.
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

# Infer field types from field values.
directive @infer on OBJECT

# Do not infer field types from field values.
directive @dontInfer on OBJECT

# Define the mime-types handled by this type.
directive @mimeTypes(
  # The mime-types handled by this type.
  types: [String!]! = []
) on OBJECT

# Define parent-child relations between types. This is used to add `child*` and `children*` convenience fields like `childImageSharp`.
directive @childOf(
  # A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin.
  mimeTypes: [String!]! = []

  # A list of types this type is a child of. Usually these are the types handled by a transformer plugin.
  types: [String!]! = []
) on OBJECT

# DEPRECATED: Use interface inheritance instead, i.e. "interface Foo implements Node".
#
# Adds root query fields for an interface. All implementing types must also implement the Node interface.
directive @nodeInterface on INTERFACE

type File implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  accessTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  changeTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  mtime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  ctime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int

  # Copy file to static directory and return public url to it
  publicURL: String

  # Returns all children nodes filtered by type ImageSharp
  childrenImageSharp: [ImageSharp]

  # Returns the first child node of type ImageSharp or null if there are no children of given type on this node
  childImageSharp: ImageSharp
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

# Node Interface
interface Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type Internal {
  content: String
  contentDigest: String!
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
}

# A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar Date

type Directory implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  accessTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  changeTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  mtime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  ctime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type Site implements Node {
  buildTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  polyfill: Boolean
  pathPrefix: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SiteSiteMetadata {
  title: String
  description: String
  author: String
  siteUrl: String
}

type SiteFunction implements Node {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SitePage implements Node {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  isCreatedByStatefulCreatePages: Boolean
  pluginCreator: SitePlugin
  pluginCreatorId: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

enum ImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

enum ImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharp implements Node {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpFixed
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = AUTO
    toFormatBase64: ImageFormat = AUTO
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    # A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: ImageLayout = CONSTRAINED

    # The display width of the generated image for layout = FIXED, and the maximum display width of the largest image for layout = CONSTRAINED.
    # Ignored if layout = FLUID.
    width: Int

    # The display height of the generated image for layout = FIXED, and the maximum display height of the largest image for layout = CONSTRAINED.
    # The image will be cropped if the aspect ratio does not match the source image. If omitted, it is calculated from the supplied width,
    # matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # TRACED_SVG: a low-resolution traced SVG of the image.
    # NONE: no placeholder. Set "background" to use a fixed background color.
    placeholder: ImagePlaceholder

    # Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    blurredOptions: BlurredOptions

    # Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    tracedSVGOptions: Potrace

    # The image formats to generate. Valid values are "AUTO" (meaning the same format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    # The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    # not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    # both PNG and JPG is not supported and will be ignored.
    formats: [ImageFormat]

    # A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1, 2] for CONSTRAINED. In this case, an image with a constrained layout
    # and width = 400 would generate images at 100, 200, 400 and 800px wide. Ignored for FULL_WIDTH images, which use breakpoints instead
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download.
    # You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    # does not actually span the full width of the screen, in which case you should pass the correct size here.
    sizes: String

    # The default quality. This is overridden by any format-specific options
    quality: Int

    # Options to pass to sharp when generating JPG images.
    jpgOptions: JPGOptions

    # Options to pass to sharp when generating PNG images.
    pngOptions: PNGOptions

    # Options to pass to sharp when generating WebP images.
    webpOptions: WebPOptions

    # Options to pass to sharp when generating AVIF images.
    avifOptions: AVIFOptions

    # Options to pass to sharp to control cropping and other image manipulations.
    transformOptions: TransformOptions

    # Background color applied to the wrapper. Also passed to sharp to use as a background when "letterboxing" an image to another aspect ratio.
    backgroundColor: String
  ): JSON!
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, base64: Boolean = false, traceSVG: Potrace, toFormat: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResize
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum ImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

input BlurredOptions {
  # Width of the generated low-res preview. Default is 20px
  width: Int

  # Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this
  toFormat: ImageFormat
}

input JPGOptions {
  quality: Int
  progressive: Boolean = true
}

input PNGOptions {
  quality: Int
  compressionSpeed: Int = 4
}

input WebPOptions {
  quality: Int
}

input AVIFOptions {
  quality: Int
  lossless: Boolean
  speed: Int
}

input TransformOptions {
  grayscale: Boolean = false
  duotone: DuotoneGradient
  rotate: Int = 0
  trim: Float = 0
  cropFocus: ImageCropFocus = ATTENTION
  fit: ImageFit = COVER
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

type SitePlugin implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  resolve: String
  name: String
  version: String
  pluginOptions: SitePluginPluginOptions
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  packageJson: SitePluginPackageJson
}

type SitePluginPluginOptions {
  base64Width: Int
  stripMetadata: Boolean
  defaultQuality: Int
  failOnError: Boolean
  autoFix: Boolean
  language: String
  includeResolvers: Boolean
  outputPath: String
  emitSchema: SitePluginPluginOptionsEmitSchema
  emitPluginDocuments: SitePluginPluginOptionsEmitPluginDocuments
  specialChars: String
  name: String
  path: String
  isTSX: Boolean
  jsxPragma: String
  allExtensions: Boolean
  typeName: String
  fieldName: String
  url: String
  pathCheck: Boolean
}

type SitePluginPluginOptionsEmitSchema {
  _xsrcxxxgeneratedxxxgatsbyxschemaxgraphql: Boolean
  _xsrcxxxgeneratedxxxgatsbyxintrospectionxjson: Boolean
}

type SitePluginPluginOptionsEmitPluginDocuments {
  src___generated___gatsby_plugin_documents_graphql: Boolean
}

type SitePluginPackageJson {
  name: String
  description: String
  version: String
  main: String
  license: String
  dependencies: [SitePluginPackageJsonDependencies]
  devDependencies: [SitePluginPackageJsonDevDependencies]
  peerDependencies: [SitePluginPackageJsonPeerDependencies]
  keywords: [String]
}

type SitePluginPackageJsonDependencies {
  name: String
  version: String
}

type SitePluginPackageJsonDevDependencies {
  name: String
  version: String
}

type SitePluginPackageJsonPeerDependencies {
  name: String
  version: String
}

type SiteBuildMetadata implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  buildTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
}

type GraphQLSource implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  typeName: String
  fieldName: String
}

type StaticImage implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  sourceInstanceName: String
  relativePath: String
  extension: String
  prettySize: String
  modifiedTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  accessTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  changeTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  birthTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  root: String
  dir: String
  base: String
  ext: String
  name: String
  absolutePath: String
  relativeDirectory: String
  dev: Int
  mode: Int
  nlink: Int
  uid: Int
  rdev: Int
  blksize: Int
  ino: Int
  size: Int
  blocks: Int
  atimeMs: Float
  mtimeMs: Float
  ctimeMs: Float
  birthtimeMs: Int
  atime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  mtime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  ctime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  birthtime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
}

type Portfolio_About {
  id: String!
  title: String!
  body: String!
  admin_id: String!
  updatedAt: Portfolio_DateTime!
  admin: Portfolio_Admin!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar Portfolio_DateTime

type Portfolio_Admin {
  id: String!
  email: String!
  fname: String!
  lname: String!
  linkedIn: String!
  whatsapp: String!
  instagram: String!
  github: String!
  heroImage: String!
  stack: [String!]!
  resumes: [String!]!
  confirmed: Boolean!
  isPublished: Boolean!
  stacks: [String!]!
  createdAt: Portfolio_DateTime!
  updatedAt: Portfolio_DateTime!
  _count: Portfolio_AdminCount
}

type Portfolio_AdminCount {
  about: Int!
  messages: Int!
  projects: Int!
}

input Portfolio_AboutWhereUniqueInput {
  id: String
}

input Portfolio_AboutWhereInput {
  AND: [Portfolio_AboutWhereInput!]
  OR: [Portfolio_AboutWhereInput!]
  NOT: [Portfolio_AboutWhereInput!]
  id: Portfolio_StringFilter
  title: Portfolio_StringFilter
  body: Portfolio_StringFilter
  admin: Portfolio_AdminRelationFilter
  admin_id: Portfolio_StringFilter
  updatedAt: Portfolio_DateTimeFilter
}

input Portfolio_StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: Portfolio_QueryMode
  not: Portfolio_NestedStringFilter
}

enum Portfolio_QueryMode {
  default
  insensitive
}

input Portfolio_NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: Portfolio_NestedStringFilter
}

input Portfolio_AdminRelationFilter {
  is: Portfolio_AdminWhereInput
  isNot: Portfolio_AdminWhereInput
}

input Portfolio_AdminWhereInput {
  AND: [Portfolio_AdminWhereInput!]
  OR: [Portfolio_AdminWhereInput!]
  NOT: [Portfolio_AdminWhereInput!]
  id: Portfolio_StringFilter
  email: Portfolio_StringFilter
  fname: Portfolio_StringFilter
  lname: Portfolio_StringFilter
  linkedIn: Portfolio_StringFilter
  whatsapp: Portfolio_StringFilter
  instagram: Portfolio_StringFilter
  github: Portfolio_StringFilter
  heroImage: Portfolio_StringFilter
  stack: Portfolio_StringNullableListFilter
  resumes: Portfolio_StringNullableListFilter
  confirmed: Portfolio_BoolFilter
  isPublished: Portfolio_BoolFilter
  about: Portfolio_AboutListRelationFilter
  messages: Portfolio_MessageListRelationFilter
  projects: Portfolio_ProjectListRelationFilter
  stacks: Portfolio_StringNullableListFilter
  password: Portfolio_StringFilter
  createdAt: Portfolio_DateTimeFilter
  updatedAt: Portfolio_DateTimeFilter
}

input Portfolio_StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input Portfolio_BoolFilter {
  equals: Boolean
  not: Portfolio_NestedBoolFilter
}

input Portfolio_NestedBoolFilter {
  equals: Boolean
  not: Portfolio_NestedBoolFilter
}

input Portfolio_AboutListRelationFilter {
  every: Portfolio_AboutWhereInput
  some: Portfolio_AboutWhereInput
  none: Portfolio_AboutWhereInput
}

input Portfolio_MessageListRelationFilter {
  every: Portfolio_MessageWhereInput
  some: Portfolio_MessageWhereInput
  none: Portfolio_MessageWhereInput
}

input Portfolio_MessageWhereInput {
  AND: [Portfolio_MessageWhereInput!]
  OR: [Portfolio_MessageWhereInput!]
  NOT: [Portfolio_MessageWhereInput!]
  id: Portfolio_StringFilter
  subject: Portfolio_StringFilter
  from: Portfolio_StringFilter
  body: Portfolio_StringFilter
  read_status: Portfolio_BoolFilter
  answer_status: Portfolio_BoolFilter
  admin: Portfolio_AdminRelationFilter
  admin_id: Portfolio_StringFilter
  answeredAt: Portfolio_DateTimeFilter
  createdAd: Portfolio_DateTimeFilter
}

input Portfolio_DateTimeFilter {
  equals: Portfolio_DateTime
  in: [Portfolio_DateTime!]
  notIn: [Portfolio_DateTime!]
  lt: Portfolio_DateTime
  lte: Portfolio_DateTime
  gt: Portfolio_DateTime
  gte: Portfolio_DateTime
  not: Portfolio_NestedDateTimeFilter
}

input Portfolio_NestedDateTimeFilter {
  equals: Portfolio_DateTime
  in: [Portfolio_DateTime!]
  notIn: [Portfolio_DateTime!]
  lt: Portfolio_DateTime
  lte: Portfolio_DateTime
  gt: Portfolio_DateTime
  gte: Portfolio_DateTime
  not: Portfolio_NestedDateTimeFilter
}

input Portfolio_ProjectListRelationFilter {
  every: Portfolio_ProjectWhereInput
  some: Portfolio_ProjectWhereInput
  none: Portfolio_ProjectWhereInput
}

input Portfolio_ProjectWhereInput {
  AND: [Portfolio_ProjectWhereInput!]
  OR: [Portfolio_ProjectWhereInput!]
  NOT: [Portfolio_ProjectWhereInput!]
  id: Portfolio_StringFilter
  name: Portfolio_StringFilter
  image: Portfolio_StringFilter
  type: Portfolio_StringFilter
  github_url: Portfolio_StringFilter
  app_url: Portfolio_StringFilter
  summary: Portfolio_StringFilter
  tech_categories: Portfolio_TechCategoryListRelationFilter
  questions: Portfolio_QuestionListRelationFilter
  sketches: Portfolio_SketchListRelationFilter
  admin: Portfolio_AdminRelationFilter
  admin_id: Portfolio_StringFilter
  createdAt: Portfolio_DateTimeFilter
  updatedAt: Portfolio_DateTimeFilter
}

input Portfolio_TechCategoryListRelationFilter {
  every: Portfolio_TechCategoryWhereInput
  some: Portfolio_TechCategoryWhereInput
  none: Portfolio_TechCategoryWhereInput
}

input Portfolio_TechCategoryWhereInput {
  AND: [Portfolio_TechCategoryWhereInput!]
  OR: [Portfolio_TechCategoryWhereInput!]
  NOT: [Portfolio_TechCategoryWhereInput!]
  id: Portfolio_StringFilter
  name: Portfolio_StringFilter
  techs: Portfolio_TechListRelationFilter
  project: Portfolio_ProjectRelationFilter
  project_id: Portfolio_StringFilter
}

input Portfolio_TechListRelationFilter {
  every: Portfolio_TechWhereInput
  some: Portfolio_TechWhereInput
  none: Portfolio_TechWhereInput
}

input Portfolio_TechWhereInput {
  AND: [Portfolio_TechWhereInput!]
  OR: [Portfolio_TechWhereInput!]
  NOT: [Portfolio_TechWhereInput!]
  id: Portfolio_StringFilter
  name: Portfolio_StringFilter
  tech_categories: Portfolio_TechCategoryRelationFilter
  tech_category_id: Portfolio_StringFilter
}

input Portfolio_TechCategoryRelationFilter {
  is: Portfolio_TechCategoryWhereInput
  isNot: Portfolio_TechCategoryWhereInput
}

input Portfolio_ProjectRelationFilter {
  is: Portfolio_ProjectWhereInput
  isNot: Portfolio_ProjectWhereInput
}

input Portfolio_QuestionListRelationFilter {
  every: Portfolio_QuestionWhereInput
  some: Portfolio_QuestionWhereInput
  none: Portfolio_QuestionWhereInput
}

input Portfolio_QuestionWhereInput {
  AND: [Portfolio_QuestionWhereInput!]
  OR: [Portfolio_QuestionWhereInput!]
  NOT: [Portfolio_QuestionWhereInput!]
  id: Portfolio_StringFilter
  question: Portfolio_StringFilter
  answer: Portfolio_AnswerRelationFilter
  answer_id: Portfolio_StringFilter
  project: Portfolio_ProjectRelationFilter
  project_id: Portfolio_StringFilter
}

input Portfolio_AnswerRelationFilter {
  is: Portfolio_AnswerWhereInput
  isNot: Portfolio_AnswerWhereInput
}

input Portfolio_AnswerWhereInput {
  AND: [Portfolio_AnswerWhereInput!]
  OR: [Portfolio_AnswerWhereInput!]
  NOT: [Portfolio_AnswerWhereInput!]
  id: Portfolio_StringFilter
  answer: Portfolio_StringFilter
  question: Portfolio_QuestionRelationFilter
}

input Portfolio_QuestionRelationFilter {
  is: Portfolio_QuestionWhereInput
  isNot: Portfolio_QuestionWhereInput
}

input Portfolio_SketchListRelationFilter {
  every: Portfolio_SketchWhereInput
  some: Portfolio_SketchWhereInput
  none: Portfolio_SketchWhereInput
}

input Portfolio_SketchWhereInput {
  AND: [Portfolio_SketchWhereInput!]
  OR: [Portfolio_SketchWhereInput!]
  NOT: [Portfolio_SketchWhereInput!]
  id: Portfolio_StringFilter
  title: Portfolio_StringFilter
  description: Portfolio_StringFilter
  summary: Portfolio_StringFilter
  download_link: Portfolio_StringFilter
  image: Portfolio_StringFilter
  project: Portfolio_ProjectRelationFilter
  project_id: Portfolio_StringFilter
}

input Portfolio_AboutOrderByWithRelationInput {
  id: Portfolio_SortOrder
  title: Portfolio_SortOrder
  body: Portfolio_SortOrder
  admin: Portfolio_AdminOrderByWithRelationInput
  admin_id: Portfolio_SortOrder
  updatedAt: Portfolio_SortOrder
}

enum Portfolio_SortOrder {
  asc
  desc
}

input Portfolio_AdminOrderByWithRelationInput {
  id: Portfolio_SortOrder
  email: Portfolio_SortOrder
  fname: Portfolio_SortOrder
  lname: Portfolio_SortOrder
  linkedIn: Portfolio_SortOrder
  whatsapp: Portfolio_SortOrder
  instagram: Portfolio_SortOrder
  github: Portfolio_SortOrder
  heroImage: Portfolio_SortOrder
  stack: Portfolio_SortOrder
  resumes: Portfolio_SortOrder
  confirmed: Portfolio_SortOrder
  isPublished: Portfolio_SortOrder
  about: Portfolio_AboutOrderByRelationAggregateInput
  messages: Portfolio_MessageOrderByRelationAggregateInput
  projects: Portfolio_ProjectOrderByRelationAggregateInput
  stacks: Portfolio_SortOrder
  password: Portfolio_SortOrder
  createdAt: Portfolio_SortOrder
  updatedAt: Portfolio_SortOrder
}

input Portfolio_AboutOrderByRelationAggregateInput {
  _count: Portfolio_SortOrder
}

input Portfolio_MessageOrderByRelationAggregateInput {
  _count: Portfolio_SortOrder
}

input Portfolio_ProjectOrderByRelationAggregateInput {
  _count: Portfolio_SortOrder
}

enum Portfolio_AboutScalarFieldEnum {
  id
  title
  body
  admin_id
  updatedAt
}

type Portfolio_Answer {
  id: String!
  answer: String!
  question: Portfolio_Question
}

type Portfolio_Question {
  id: String!
  question: String!
  answer_id: String!
  project_id: String!
  answer: Portfolio_Answer!
  project: Portfolio_Project!
}

type Portfolio_Project {
  id: String!
  name: String!
  image: String!
  type: String!
  github_url: String!
  app_url: String!
  summary: String!
  admin_id: String!
  createdAt: Portfolio_DateTime!
  updatedAt: Portfolio_DateTime!
  _count: Portfolio_ProjectCount
  tech_categories(where: Portfolio_TechCategoryWhereInput, orderBy: [Portfolio_TechCategoryOrderByWithRelationInput!], cursor: Portfolio_TechCategoryWhereUniqueInput, take: Int, skip: Int, distinct: [Portfolio_TechCategoryScalarFieldEnum!]): [Portfolio_TechCategory!]!
  questions(where: Portfolio_QuestionWhereInput, orderBy: [Portfolio_QuestionOrderByWithRelationInput!], cursor: Portfolio_QuestionWhereUniqueInput, take: Int, skip: Int, distinct: [Portfolio_QuestionScalarFieldEnum!]): [Portfolio_Question!]!
  sketches(where: Portfolio_SketchWhereInput, orderBy: [Portfolio_SketchOrderByWithRelationInput!], cursor: Portfolio_SketchWhereUniqueInput, take: Int, skip: Int, distinct: [Portfolio_SketchScalarFieldEnum!]): [Portfolio_Sketch!]!
  admin: Portfolio_Admin!
}

type Portfolio_ProjectCount {
  tech_categories: Int!
  questions: Int!
  sketches: Int!
}

type Portfolio_TechCategory {
  id: String!
  name: String!
  project_id: String!
  _count: Portfolio_TechCategoryCount
  techs(where: Portfolio_TechWhereInput, orderBy: [Portfolio_TechOrderByWithRelationInput!], cursor: Portfolio_TechWhereUniqueInput, take: Int, skip: Int, distinct: [Portfolio_TechScalarFieldEnum!]): [Portfolio_Tech!]!
  project: Portfolio_Project!
}

type Portfolio_TechCategoryCount {
  techs: Int!
}

type Portfolio_Tech {
  id: String!
  name: String!
  tech_category_id: String!
  tech_categories: Portfolio_TechCategory!
}

input Portfolio_TechOrderByWithRelationInput {
  id: Portfolio_SortOrder
  name: Portfolio_SortOrder
  tech_categories: Portfolio_TechCategoryOrderByWithRelationInput
  tech_category_id: Portfolio_SortOrder
}

input Portfolio_TechCategoryOrderByWithRelationInput {
  id: Portfolio_SortOrder
  name: Portfolio_SortOrder
  techs: Portfolio_TechOrderByRelationAggregateInput
  project: Portfolio_ProjectOrderByWithRelationInput
  project_id: Portfolio_SortOrder
}

input Portfolio_TechOrderByRelationAggregateInput {
  _count: Portfolio_SortOrder
}

input Portfolio_ProjectOrderByWithRelationInput {
  id: Portfolio_SortOrder
  name: Portfolio_SortOrder
  image: Portfolio_SortOrder
  type: Portfolio_SortOrder
  github_url: Portfolio_SortOrder
  app_url: Portfolio_SortOrder
  summary: Portfolio_SortOrder
  tech_categories: Portfolio_TechCategoryOrderByRelationAggregateInput
  questions: Portfolio_QuestionOrderByRelationAggregateInput
  sketches: Portfolio_SketchOrderByRelationAggregateInput
  admin: Portfolio_AdminOrderByWithRelationInput
  admin_id: Portfolio_SortOrder
  createdAt: Portfolio_SortOrder
  updatedAt: Portfolio_SortOrder
}

input Portfolio_TechCategoryOrderByRelationAggregateInput {
  _count: Portfolio_SortOrder
}

input Portfolio_QuestionOrderByRelationAggregateInput {
  _count: Portfolio_SortOrder
}

input Portfolio_SketchOrderByRelationAggregateInput {
  _count: Portfolio_SortOrder
}

input Portfolio_TechWhereUniqueInput {
  id: String
}

enum Portfolio_TechScalarFieldEnum {
  id
  name
  tech_category_id
}

input Portfolio_TechCategoryWhereUniqueInput {
  id: String
}

enum Portfolio_TechCategoryScalarFieldEnum {
  id
  name
  project_id
}

input Portfolio_QuestionOrderByWithRelationInput {
  id: Portfolio_SortOrder
  question: Portfolio_SortOrder
  answer: Portfolio_AnswerOrderByWithRelationInput
  answer_id: Portfolio_SortOrder
  project: Portfolio_ProjectOrderByWithRelationInput
  project_id: Portfolio_SortOrder
}

input Portfolio_AnswerOrderByWithRelationInput {
  id: Portfolio_SortOrder
  answer: Portfolio_SortOrder
  question: Portfolio_QuestionOrderByWithRelationInput
}

input Portfolio_QuestionWhereUniqueInput {
  id: String
  answer_id: String
}

enum Portfolio_QuestionScalarFieldEnum {
  id
  question
  answer_id
  project_id
}

type Portfolio_Sketch {
  id: String!
  title: String!
  description: String!
  summary: String!
  download_link: String!
  image: String!
  project_id: String!
  project: Portfolio_Project!
}

input Portfolio_SketchOrderByWithRelationInput {
  id: Portfolio_SortOrder
  title: Portfolio_SortOrder
  description: Portfolio_SortOrder
  summary: Portfolio_SortOrder
  download_link: Portfolio_SortOrder
  image: Portfolio_SortOrder
  project: Portfolio_ProjectOrderByWithRelationInput
  project_id: Portfolio_SortOrder
}

input Portfolio_SketchWhereUniqueInput {
  id: String
}

enum Portfolio_SketchScalarFieldEnum {
  id
  title
  description
  summary
  download_link
  image
  project_id
}

input Portfolio_AnswerWhereUniqueInput {
  id: String
}

enum Portfolio_AnswerScalarFieldEnum {
  id
  answer
}

type Portfolio_Message {
  id: String!
  subject: String!
  from: String!
  body: String!
  read_status: Boolean!
  answer_status: Boolean!
  admin_id: String!
  answeredAt: Portfolio_DateTime!
  createdAd: Portfolio_DateTime!
  admin: Portfolio_Admin!
}

input Portfolio_MessageWhereUniqueInput {
  id: String
}

input Portfolio_MessageOrderByWithRelationInput {
  id: Portfolio_SortOrder
  subject: Portfolio_SortOrder
  from: Portfolio_SortOrder
  body: Portfolio_SortOrder
  read_status: Portfolio_SortOrder
  answer_status: Portfolio_SortOrder
  admin: Portfolio_AdminOrderByWithRelationInput
  admin_id: Portfolio_SortOrder
  answeredAt: Portfolio_SortOrder
  createdAd: Portfolio_SortOrder
}

enum Portfolio_MessageScalarFieldEnum {
  id
  subject
  from
  body
  read_status
  answer_status
  admin_id
  answeredAt
  createdAd
}

input Portfolio_ProjectWhereUniqueInput {
  id: String
}

enum Portfolio_ProjectScalarFieldEnum {
  id
  name
  image
  type
  github_url
  app_url
  summary
  admin_id
  createdAt
  updatedAt
}

input Portfolio_AboutCreateInput {
  id: String
  title: String!
  body: String!
  updatedAt: Portfolio_DateTime
  admin: Portfolio_AdminCreateNestedOneWithoutAboutInput!
}

input Portfolio_AdminCreateNestedOneWithoutAboutInput {
  create: Portfolio_AdminCreateWithoutAboutInput
  connectOrCreate: Portfolio_AdminCreateOrConnectWithoutAboutInput
  connect: Portfolio_AdminWhereUniqueInput
}

input Portfolio_AdminCreateWithoutAboutInput {
  id: String
  email: String!
  fname: String!
  lname: String!
  linkedIn: String!
  whatsapp: String!
  instagram: String!
  github: String!
  heroImage: String!
  confirmed: Boolean
  isPublished: Boolean
  password: String!
  createdAt: Portfolio_DateTime
  updatedAt: Portfolio_DateTime
  stack: Portfolio_AdminCreatestackInput
  resumes: Portfolio_AdminCreateresumesInput
  stacks: Portfolio_AdminCreatestacksInput
  messages: Portfolio_MessageCreateNestedManyWithoutAdminInput
  projects: Portfolio_ProjectCreateNestedManyWithoutAdminInput
}

input Portfolio_AdminCreatestackInput {
  set: [String!]!
}

input Portfolio_AdminCreateresumesInput {
  set: [String!]!
}

input Portfolio_AdminCreatestacksInput {
  set: [String!]!
}

input Portfolio_MessageCreateNestedManyWithoutAdminInput {
  create: [Portfolio_MessageCreateWithoutAdminInput!]
  connectOrCreate: [Portfolio_MessageCreateOrConnectWithoutAdminInput!]
  createMany: Portfolio_MessageCreateManyAdminInputEnvelope
  connect: [Portfolio_MessageWhereUniqueInput!]
}

input Portfolio_MessageCreateWithoutAdminInput {
  id: String
  subject: String!
  from: String!
  body: String!
  read_status: Boolean
  answer_status: Boolean
  answeredAt: Portfolio_DateTime
  createdAd: Portfolio_DateTime
}

input Portfolio_MessageCreateOrConnectWithoutAdminInput {
  where: Portfolio_MessageWhereUniqueInput!
  create: Portfolio_MessageCreateWithoutAdminInput!
}

input Portfolio_MessageCreateManyAdminInputEnvelope {
  data: [Portfolio_MessageCreateManyAdminInput!]!
  skipDuplicates: Boolean
}

input Portfolio_MessageCreateManyAdminInput {
  id: String
  subject: String!
  from: String!
  body: String!
  read_status: Boolean
  answer_status: Boolean
  answeredAt: Portfolio_DateTime
  createdAd: Portfolio_DateTime
}

input Portfolio_ProjectCreateNestedManyWithoutAdminInput {
  create: [Portfolio_ProjectCreateWithoutAdminInput!]
  connectOrCreate: [Portfolio_ProjectCreateOrConnectWithoutAdminInput!]
  createMany: Portfolio_ProjectCreateManyAdminInputEnvelope
  connect: [Portfolio_ProjectWhereUniqueInput!]
}

input Portfolio_ProjectCreateWithoutAdminInput {
  id: String
  name: String!
  image: String!
  type: String!
  github_url: String!
  app_url: String!
  summary: String!
  createdAt: Portfolio_DateTime
  updatedAt: Portfolio_DateTime
  tech_categories: Portfolio_TechCategoryCreateNestedManyWithoutProjectInput
  questions: Portfolio_QuestionCreateNestedManyWithoutProjectInput
  sketches: Portfolio_SketchCreateNestedManyWithoutProjectInput
}

input Portfolio_TechCategoryCreateNestedManyWithoutProjectInput {
  create: [Portfolio_TechCategoryCreateWithoutProjectInput!]
  connectOrCreate: [Portfolio_TechCategoryCreateOrConnectWithoutProjectInput!]
  createMany: Portfolio_TechCategoryCreateManyProjectInputEnvelope
  connect: [Portfolio_TechCategoryWhereUniqueInput!]
}

input Portfolio_TechCategoryCreateWithoutProjectInput {
  id: String
  name: String!
  techs: Portfolio_TechCreateNestedManyWithoutTech_categoriesInput
}

input Portfolio_TechCreateNestedManyWithoutTech_categoriesInput {
  create: [Portfolio_TechCreateWithoutTech_categoriesInput!]
  connectOrCreate: [Portfolio_TechCreateOrConnectWithoutTech_categoriesInput!]
  createMany: Portfolio_TechCreateManyTech_categoriesInputEnvelope
  connect: [Portfolio_TechWhereUniqueInput!]
}

input Portfolio_TechCreateWithoutTech_categoriesInput {
  id: String
  name: String!
}

input Portfolio_TechCreateOrConnectWithoutTech_categoriesInput {
  where: Portfolio_TechWhereUniqueInput!
  create: Portfolio_TechCreateWithoutTech_categoriesInput!
}

input Portfolio_TechCreateManyTech_categoriesInputEnvelope {
  data: [Portfolio_TechCreateManyTech_categoriesInput!]!
  skipDuplicates: Boolean
}

input Portfolio_TechCreateManyTech_categoriesInput {
  id: String
  name: String!
}

input Portfolio_TechCategoryCreateOrConnectWithoutProjectInput {
  where: Portfolio_TechCategoryWhereUniqueInput!
  create: Portfolio_TechCategoryCreateWithoutProjectInput!
}

input Portfolio_TechCategoryCreateManyProjectInputEnvelope {
  data: [Portfolio_TechCategoryCreateManyProjectInput!]!
  skipDuplicates: Boolean
}

input Portfolio_TechCategoryCreateManyProjectInput {
  id: String
  name: String!
}

input Portfolio_QuestionCreateNestedManyWithoutProjectInput {
  create: [Portfolio_QuestionCreateWithoutProjectInput!]
  connectOrCreate: [Portfolio_QuestionCreateOrConnectWithoutProjectInput!]
  createMany: Portfolio_QuestionCreateManyProjectInputEnvelope
  connect: [Portfolio_QuestionWhereUniqueInput!]
}

input Portfolio_QuestionCreateWithoutProjectInput {
  id: String
  question: String!
  answer: Portfolio_AnswerCreateNestedOneWithoutQuestionInput!
}

input Portfolio_AnswerCreateNestedOneWithoutQuestionInput {
  create: Portfolio_AnswerCreateWithoutQuestionInput
  connectOrCreate: Portfolio_AnswerCreateOrConnectWithoutQuestionInput
  connect: Portfolio_AnswerWhereUniqueInput
}

input Portfolio_AnswerCreateWithoutQuestionInput {
  id: String
  answer: String!
}

input Portfolio_AnswerCreateOrConnectWithoutQuestionInput {
  where: Portfolio_AnswerWhereUniqueInput!
  create: Portfolio_AnswerCreateWithoutQuestionInput!
}

input Portfolio_QuestionCreateOrConnectWithoutProjectInput {
  where: Portfolio_QuestionWhereUniqueInput!
  create: Portfolio_QuestionCreateWithoutProjectInput!
}

input Portfolio_QuestionCreateManyProjectInputEnvelope {
  data: [Portfolio_QuestionCreateManyProjectInput!]!
  skipDuplicates: Boolean
}

input Portfolio_QuestionCreateManyProjectInput {
  id: String
  question: String!
  answer_id: String!
}

input Portfolio_SketchCreateNestedManyWithoutProjectInput {
  create: [Portfolio_SketchCreateWithoutProjectInput!]
  connectOrCreate: [Portfolio_SketchCreateOrConnectWithoutProjectInput!]
  createMany: Portfolio_SketchCreateManyProjectInputEnvelope
  connect: [Portfolio_SketchWhereUniqueInput!]
}

input Portfolio_SketchCreateWithoutProjectInput {
  id: String
  title: String!
  description: String!
  summary: String!
  download_link: String!
  image: String!
}

input Portfolio_SketchCreateOrConnectWithoutProjectInput {
  where: Portfolio_SketchWhereUniqueInput!
  create: Portfolio_SketchCreateWithoutProjectInput!
}

input Portfolio_SketchCreateManyProjectInputEnvelope {
  data: [Portfolio_SketchCreateManyProjectInput!]!
  skipDuplicates: Boolean
}

input Portfolio_SketchCreateManyProjectInput {
  id: String
  title: String!
  description: String!
  summary: String!
  download_link: String!
  image: String!
}

input Portfolio_ProjectCreateOrConnectWithoutAdminInput {
  where: Portfolio_ProjectWhereUniqueInput!
  create: Portfolio_ProjectCreateWithoutAdminInput!
}

input Portfolio_ProjectCreateManyAdminInputEnvelope {
  data: [Portfolio_ProjectCreateManyAdminInput!]!
  skipDuplicates: Boolean
}

input Portfolio_ProjectCreateManyAdminInput {
  id: String
  name: String!
  image: String!
  type: String!
  github_url: String!
  app_url: String!
  summary: String!
  createdAt: Portfolio_DateTime
  updatedAt: Portfolio_DateTime
}

input Portfolio_AdminCreateOrConnectWithoutAboutInput {
  where: Portfolio_AdminWhereUniqueInput!
  create: Portfolio_AdminCreateWithoutAboutInput!
}

input Portfolio_AdminWhereUniqueInput {
  id: String
  email: String
}

input Portfolio_AboutUpdateInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  title: Portfolio_StringFieldUpdateOperationsInput
  body: Portfolio_StringFieldUpdateOperationsInput
  updatedAt: Portfolio_DateTimeFieldUpdateOperationsInput
  admin: Portfolio_AdminUpdateOneRequiredWithoutAboutInput
}

input Portfolio_StringFieldUpdateOperationsInput {
  set: String
}

input Portfolio_DateTimeFieldUpdateOperationsInput {
  set: Portfolio_DateTime
}

input Portfolio_AdminUpdateOneRequiredWithoutAboutInput {
  create: Portfolio_AdminCreateWithoutAboutInput
  connectOrCreate: Portfolio_AdminCreateOrConnectWithoutAboutInput
  upsert: Portfolio_AdminUpsertWithoutAboutInput
  connect: Portfolio_AdminWhereUniqueInput
  update: Portfolio_AdminUpdateWithoutAboutInput
}

input Portfolio_AdminUpsertWithoutAboutInput {
  update: Portfolio_AdminUpdateWithoutAboutInput!
  create: Portfolio_AdminCreateWithoutAboutInput!
}

input Portfolio_AdminUpdateWithoutAboutInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  email: Portfolio_StringFieldUpdateOperationsInput
  fname: Portfolio_StringFieldUpdateOperationsInput
  lname: Portfolio_StringFieldUpdateOperationsInput
  linkedIn: Portfolio_StringFieldUpdateOperationsInput
  whatsapp: Portfolio_StringFieldUpdateOperationsInput
  instagram: Portfolio_StringFieldUpdateOperationsInput
  github: Portfolio_StringFieldUpdateOperationsInput
  heroImage: Portfolio_StringFieldUpdateOperationsInput
  confirmed: Portfolio_BoolFieldUpdateOperationsInput
  isPublished: Portfolio_BoolFieldUpdateOperationsInput
  password: Portfolio_StringFieldUpdateOperationsInput
  createdAt: Portfolio_DateTimeFieldUpdateOperationsInput
  updatedAt: Portfolio_DateTimeFieldUpdateOperationsInput
  stack: Portfolio_AdminUpdatestackInput
  resumes: Portfolio_AdminUpdateresumesInput
  stacks: Portfolio_AdminUpdatestacksInput
  messages: Portfolio_MessageUpdateManyWithoutAdminInput
  projects: Portfolio_ProjectUpdateManyWithoutAdminInput
}

input Portfolio_BoolFieldUpdateOperationsInput {
  set: Boolean
}

input Portfolio_AdminUpdatestackInput {
  set: [String!]
  push: [String!]
}

input Portfolio_AdminUpdateresumesInput {
  set: [String!]
  push: [String!]
}

input Portfolio_AdminUpdatestacksInput {
  set: [String!]
  push: [String!]
}

input Portfolio_MessageUpdateManyWithoutAdminInput {
  create: [Portfolio_MessageCreateWithoutAdminInput!]
  connectOrCreate: [Portfolio_MessageCreateOrConnectWithoutAdminInput!]
  upsert: [Portfolio_MessageUpsertWithWhereUniqueWithoutAdminInput!]
  createMany: Portfolio_MessageCreateManyAdminInputEnvelope
  connect: [Portfolio_MessageWhereUniqueInput!]
  set: [Portfolio_MessageWhereUniqueInput!]
  disconnect: [Portfolio_MessageWhereUniqueInput!]
  delete: [Portfolio_MessageWhereUniqueInput!]
  update: [Portfolio_MessageUpdateWithWhereUniqueWithoutAdminInput!]
  updateMany: [Portfolio_MessageUpdateManyWithWhereWithoutAdminInput!]
  deleteMany: [Portfolio_MessageScalarWhereInput!]
}

input Portfolio_MessageUpsertWithWhereUniqueWithoutAdminInput {
  where: Portfolio_MessageWhereUniqueInput!
  update: Portfolio_MessageUpdateWithoutAdminInput!
  create: Portfolio_MessageCreateWithoutAdminInput!
}

input Portfolio_MessageUpdateWithoutAdminInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  subject: Portfolio_StringFieldUpdateOperationsInput
  from: Portfolio_StringFieldUpdateOperationsInput
  body: Portfolio_StringFieldUpdateOperationsInput
  read_status: Portfolio_BoolFieldUpdateOperationsInput
  answer_status: Portfolio_BoolFieldUpdateOperationsInput
  answeredAt: Portfolio_DateTimeFieldUpdateOperationsInput
  createdAd: Portfolio_DateTimeFieldUpdateOperationsInput
}

input Portfolio_MessageUpdateWithWhereUniqueWithoutAdminInput {
  where: Portfolio_MessageWhereUniqueInput!
  data: Portfolio_MessageUpdateWithoutAdminInput!
}

input Portfolio_MessageUpdateManyWithWhereWithoutAdminInput {
  where: Portfolio_MessageScalarWhereInput!
  data: Portfolio_MessageUpdateManyMutationInput!
}

input Portfolio_MessageScalarWhereInput {
  AND: [Portfolio_MessageScalarWhereInput!]
  OR: [Portfolio_MessageScalarWhereInput!]
  NOT: [Portfolio_MessageScalarWhereInput!]
  id: Portfolio_StringFilter
  subject: Portfolio_StringFilter
  from: Portfolio_StringFilter
  body: Portfolio_StringFilter
  read_status: Portfolio_BoolFilter
  answer_status: Portfolio_BoolFilter
  admin_id: Portfolio_StringFilter
  answeredAt: Portfolio_DateTimeFilter
  createdAd: Portfolio_DateTimeFilter
}

input Portfolio_MessageUpdateManyMutationInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  subject: Portfolio_StringFieldUpdateOperationsInput
  from: Portfolio_StringFieldUpdateOperationsInput
  body: Portfolio_StringFieldUpdateOperationsInput
  read_status: Portfolio_BoolFieldUpdateOperationsInput
  answer_status: Portfolio_BoolFieldUpdateOperationsInput
  answeredAt: Portfolio_DateTimeFieldUpdateOperationsInput
  createdAd: Portfolio_DateTimeFieldUpdateOperationsInput
}

input Portfolio_ProjectUpdateManyWithoutAdminInput {
  create: [Portfolio_ProjectCreateWithoutAdminInput!]
  connectOrCreate: [Portfolio_ProjectCreateOrConnectWithoutAdminInput!]
  upsert: [Portfolio_ProjectUpsertWithWhereUniqueWithoutAdminInput!]
  createMany: Portfolio_ProjectCreateManyAdminInputEnvelope
  connect: [Portfolio_ProjectWhereUniqueInput!]
  set: [Portfolio_ProjectWhereUniqueInput!]
  disconnect: [Portfolio_ProjectWhereUniqueInput!]
  delete: [Portfolio_ProjectWhereUniqueInput!]
  update: [Portfolio_ProjectUpdateWithWhereUniqueWithoutAdminInput!]
  updateMany: [Portfolio_ProjectUpdateManyWithWhereWithoutAdminInput!]
  deleteMany: [Portfolio_ProjectScalarWhereInput!]
}

input Portfolio_ProjectUpsertWithWhereUniqueWithoutAdminInput {
  where: Portfolio_ProjectWhereUniqueInput!
  update: Portfolio_ProjectUpdateWithoutAdminInput!
  create: Portfolio_ProjectCreateWithoutAdminInput!
}

input Portfolio_ProjectUpdateWithoutAdminInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  name: Portfolio_StringFieldUpdateOperationsInput
  image: Portfolio_StringFieldUpdateOperationsInput
  type: Portfolio_StringFieldUpdateOperationsInput
  github_url: Portfolio_StringFieldUpdateOperationsInput
  app_url: Portfolio_StringFieldUpdateOperationsInput
  summary: Portfolio_StringFieldUpdateOperationsInput
  createdAt: Portfolio_DateTimeFieldUpdateOperationsInput
  updatedAt: Portfolio_DateTimeFieldUpdateOperationsInput
  tech_categories: Portfolio_TechCategoryUpdateManyWithoutProjectInput
  questions: Portfolio_QuestionUpdateManyWithoutProjectInput
  sketches: Portfolio_SketchUpdateManyWithoutProjectInput
}

input Portfolio_TechCategoryUpdateManyWithoutProjectInput {
  create: [Portfolio_TechCategoryCreateWithoutProjectInput!]
  connectOrCreate: [Portfolio_TechCategoryCreateOrConnectWithoutProjectInput!]
  upsert: [Portfolio_TechCategoryUpsertWithWhereUniqueWithoutProjectInput!]
  createMany: Portfolio_TechCategoryCreateManyProjectInputEnvelope
  connect: [Portfolio_TechCategoryWhereUniqueInput!]
  set: [Portfolio_TechCategoryWhereUniqueInput!]
  disconnect: [Portfolio_TechCategoryWhereUniqueInput!]
  delete: [Portfolio_TechCategoryWhereUniqueInput!]
  update: [Portfolio_TechCategoryUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [Portfolio_TechCategoryUpdateManyWithWhereWithoutProjectInput!]
  deleteMany: [Portfolio_TechCategoryScalarWhereInput!]
}

input Portfolio_TechCategoryUpsertWithWhereUniqueWithoutProjectInput {
  where: Portfolio_TechCategoryWhereUniqueInput!
  update: Portfolio_TechCategoryUpdateWithoutProjectInput!
  create: Portfolio_TechCategoryCreateWithoutProjectInput!
}

input Portfolio_TechCategoryUpdateWithoutProjectInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  name: Portfolio_StringFieldUpdateOperationsInput
  techs: Portfolio_TechUpdateManyWithoutTech_categoriesInput
}

input Portfolio_TechUpdateManyWithoutTech_categoriesInput {
  create: [Portfolio_TechCreateWithoutTech_categoriesInput!]
  connectOrCreate: [Portfolio_TechCreateOrConnectWithoutTech_categoriesInput!]
  upsert: [Portfolio_TechUpsertWithWhereUniqueWithoutTech_categoriesInput!]
  createMany: Portfolio_TechCreateManyTech_categoriesInputEnvelope
  connect: [Portfolio_TechWhereUniqueInput!]
  set: [Portfolio_TechWhereUniqueInput!]
  disconnect: [Portfolio_TechWhereUniqueInput!]
  delete: [Portfolio_TechWhereUniqueInput!]
  update: [Portfolio_TechUpdateWithWhereUniqueWithoutTech_categoriesInput!]
  updateMany: [Portfolio_TechUpdateManyWithWhereWithoutTech_categoriesInput!]
  deleteMany: [Portfolio_TechScalarWhereInput!]
}

input Portfolio_TechUpsertWithWhereUniqueWithoutTech_categoriesInput {
  where: Portfolio_TechWhereUniqueInput!
  update: Portfolio_TechUpdateWithoutTech_categoriesInput!
  create: Portfolio_TechCreateWithoutTech_categoriesInput!
}

input Portfolio_TechUpdateWithoutTech_categoriesInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  name: Portfolio_StringFieldUpdateOperationsInput
}

input Portfolio_TechUpdateWithWhereUniqueWithoutTech_categoriesInput {
  where: Portfolio_TechWhereUniqueInput!
  data: Portfolio_TechUpdateWithoutTech_categoriesInput!
}

input Portfolio_TechUpdateManyWithWhereWithoutTech_categoriesInput {
  where: Portfolio_TechScalarWhereInput!
  data: Portfolio_TechUpdateManyMutationInput!
}

input Portfolio_TechScalarWhereInput {
  AND: [Portfolio_TechScalarWhereInput!]
  OR: [Portfolio_TechScalarWhereInput!]
  NOT: [Portfolio_TechScalarWhereInput!]
  id: Portfolio_StringFilter
  name: Portfolio_StringFilter
  tech_category_id: Portfolio_StringFilter
}

input Portfolio_TechUpdateManyMutationInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  name: Portfolio_StringFieldUpdateOperationsInput
}

input Portfolio_TechCategoryUpdateWithWhereUniqueWithoutProjectInput {
  where: Portfolio_TechCategoryWhereUniqueInput!
  data: Portfolio_TechCategoryUpdateWithoutProjectInput!
}

input Portfolio_TechCategoryUpdateManyWithWhereWithoutProjectInput {
  where: Portfolio_TechCategoryScalarWhereInput!
  data: Portfolio_TechCategoryUpdateManyMutationInput!
}

input Portfolio_TechCategoryScalarWhereInput {
  AND: [Portfolio_TechCategoryScalarWhereInput!]
  OR: [Portfolio_TechCategoryScalarWhereInput!]
  NOT: [Portfolio_TechCategoryScalarWhereInput!]
  id: Portfolio_StringFilter
  name: Portfolio_StringFilter
  project_id: Portfolio_StringFilter
}

input Portfolio_TechCategoryUpdateManyMutationInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  name: Portfolio_StringFieldUpdateOperationsInput
}

input Portfolio_QuestionUpdateManyWithoutProjectInput {
  create: [Portfolio_QuestionCreateWithoutProjectInput!]
  connectOrCreate: [Portfolio_QuestionCreateOrConnectWithoutProjectInput!]
  upsert: [Portfolio_QuestionUpsertWithWhereUniqueWithoutProjectInput!]
  createMany: Portfolio_QuestionCreateManyProjectInputEnvelope
  connect: [Portfolio_QuestionWhereUniqueInput!]
  set: [Portfolio_QuestionWhereUniqueInput!]
  disconnect: [Portfolio_QuestionWhereUniqueInput!]
  delete: [Portfolio_QuestionWhereUniqueInput!]
  update: [Portfolio_QuestionUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [Portfolio_QuestionUpdateManyWithWhereWithoutProjectInput!]
  deleteMany: [Portfolio_QuestionScalarWhereInput!]
}

input Portfolio_QuestionUpsertWithWhereUniqueWithoutProjectInput {
  where: Portfolio_QuestionWhereUniqueInput!
  update: Portfolio_QuestionUpdateWithoutProjectInput!
  create: Portfolio_QuestionCreateWithoutProjectInput!
}

input Portfolio_QuestionUpdateWithoutProjectInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  question: Portfolio_StringFieldUpdateOperationsInput
  answer: Portfolio_AnswerUpdateOneRequiredWithoutQuestionInput
}

input Portfolio_AnswerUpdateOneRequiredWithoutQuestionInput {
  create: Portfolio_AnswerCreateWithoutQuestionInput
  connectOrCreate: Portfolio_AnswerCreateOrConnectWithoutQuestionInput
  upsert: Portfolio_AnswerUpsertWithoutQuestionInput
  connect: Portfolio_AnswerWhereUniqueInput
  update: Portfolio_AnswerUpdateWithoutQuestionInput
}

input Portfolio_AnswerUpsertWithoutQuestionInput {
  update: Portfolio_AnswerUpdateWithoutQuestionInput!
  create: Portfolio_AnswerCreateWithoutQuestionInput!
}

input Portfolio_AnswerUpdateWithoutQuestionInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  answer: Portfolio_StringFieldUpdateOperationsInput
}

input Portfolio_QuestionUpdateWithWhereUniqueWithoutProjectInput {
  where: Portfolio_QuestionWhereUniqueInput!
  data: Portfolio_QuestionUpdateWithoutProjectInput!
}

input Portfolio_QuestionUpdateManyWithWhereWithoutProjectInput {
  where: Portfolio_QuestionScalarWhereInput!
  data: Portfolio_QuestionUpdateManyMutationInput!
}

input Portfolio_QuestionScalarWhereInput {
  AND: [Portfolio_QuestionScalarWhereInput!]
  OR: [Portfolio_QuestionScalarWhereInput!]
  NOT: [Portfolio_QuestionScalarWhereInput!]
  id: Portfolio_StringFilter
  question: Portfolio_StringFilter
  answer_id: Portfolio_StringFilter
  project_id: Portfolio_StringFilter
}

input Portfolio_QuestionUpdateManyMutationInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  question: Portfolio_StringFieldUpdateOperationsInput
}

input Portfolio_SketchUpdateManyWithoutProjectInput {
  create: [Portfolio_SketchCreateWithoutProjectInput!]
  connectOrCreate: [Portfolio_SketchCreateOrConnectWithoutProjectInput!]
  upsert: [Portfolio_SketchUpsertWithWhereUniqueWithoutProjectInput!]
  createMany: Portfolio_SketchCreateManyProjectInputEnvelope
  connect: [Portfolio_SketchWhereUniqueInput!]
  set: [Portfolio_SketchWhereUniqueInput!]
  disconnect: [Portfolio_SketchWhereUniqueInput!]
  delete: [Portfolio_SketchWhereUniqueInput!]
  update: [Portfolio_SketchUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [Portfolio_SketchUpdateManyWithWhereWithoutProjectInput!]
  deleteMany: [Portfolio_SketchScalarWhereInput!]
}

input Portfolio_SketchUpsertWithWhereUniqueWithoutProjectInput {
  where: Portfolio_SketchWhereUniqueInput!
  update: Portfolio_SketchUpdateWithoutProjectInput!
  create: Portfolio_SketchCreateWithoutProjectInput!
}

input Portfolio_SketchUpdateWithoutProjectInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  title: Portfolio_StringFieldUpdateOperationsInput
  description: Portfolio_StringFieldUpdateOperationsInput
  summary: Portfolio_StringFieldUpdateOperationsInput
  download_link: Portfolio_StringFieldUpdateOperationsInput
  image: Portfolio_StringFieldUpdateOperationsInput
}

input Portfolio_SketchUpdateWithWhereUniqueWithoutProjectInput {
  where: Portfolio_SketchWhereUniqueInput!
  data: Portfolio_SketchUpdateWithoutProjectInput!
}

input Portfolio_SketchUpdateManyWithWhereWithoutProjectInput {
  where: Portfolio_SketchScalarWhereInput!
  data: Portfolio_SketchUpdateManyMutationInput!
}

input Portfolio_SketchScalarWhereInput {
  AND: [Portfolio_SketchScalarWhereInput!]
  OR: [Portfolio_SketchScalarWhereInput!]
  NOT: [Portfolio_SketchScalarWhereInput!]
  id: Portfolio_StringFilter
  title: Portfolio_StringFilter
  description: Portfolio_StringFilter
  summary: Portfolio_StringFilter
  download_link: Portfolio_StringFilter
  image: Portfolio_StringFilter
  project_id: Portfolio_StringFilter
}

input Portfolio_SketchUpdateManyMutationInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  title: Portfolio_StringFieldUpdateOperationsInput
  description: Portfolio_StringFieldUpdateOperationsInput
  summary: Portfolio_StringFieldUpdateOperationsInput
  download_link: Portfolio_StringFieldUpdateOperationsInput
  image: Portfolio_StringFieldUpdateOperationsInput
}

input Portfolio_ProjectUpdateWithWhereUniqueWithoutAdminInput {
  where: Portfolio_ProjectWhereUniqueInput!
  data: Portfolio_ProjectUpdateWithoutAdminInput!
}

input Portfolio_ProjectUpdateManyWithWhereWithoutAdminInput {
  where: Portfolio_ProjectScalarWhereInput!
  data: Portfolio_ProjectUpdateManyMutationInput!
}

input Portfolio_ProjectScalarWhereInput {
  AND: [Portfolio_ProjectScalarWhereInput!]
  OR: [Portfolio_ProjectScalarWhereInput!]
  NOT: [Portfolio_ProjectScalarWhereInput!]
  id: Portfolio_StringFilter
  name: Portfolio_StringFilter
  image: Portfolio_StringFilter
  type: Portfolio_StringFilter
  github_url: Portfolio_StringFilter
  app_url: Portfolio_StringFilter
  summary: Portfolio_StringFilter
  admin_id: Portfolio_StringFilter
  createdAt: Portfolio_DateTimeFilter
  updatedAt: Portfolio_DateTimeFilter
}

input Portfolio_ProjectUpdateManyMutationInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  name: Portfolio_StringFieldUpdateOperationsInput
  image: Portfolio_StringFieldUpdateOperationsInput
  type: Portfolio_StringFieldUpdateOperationsInput
  github_url: Portfolio_StringFieldUpdateOperationsInput
  app_url: Portfolio_StringFieldUpdateOperationsInput
  summary: Portfolio_StringFieldUpdateOperationsInput
  createdAt: Portfolio_DateTimeFieldUpdateOperationsInput
  updatedAt: Portfolio_DateTimeFieldUpdateOperationsInput
}

type Portfolio_AffectedRowsOutput {
  count: Int!
}

input Portfolio_AnswerCreateInput {
  id: String
  answer: String!
  question: Portfolio_QuestionCreateNestedOneWithoutAnswerInput
}

input Portfolio_QuestionCreateNestedOneWithoutAnswerInput {
  create: Portfolio_QuestionCreateWithoutAnswerInput
  connectOrCreate: Portfolio_QuestionCreateOrConnectWithoutAnswerInput
  connect: Portfolio_QuestionWhereUniqueInput
}

input Portfolio_QuestionCreateWithoutAnswerInput {
  id: String
  question: String!
  project: Portfolio_ProjectCreateNestedOneWithoutQuestionsInput!
}

input Portfolio_ProjectCreateNestedOneWithoutQuestionsInput {
  create: Portfolio_ProjectCreateWithoutQuestionsInput
  connectOrCreate: Portfolio_ProjectCreateOrConnectWithoutQuestionsInput
  connect: Portfolio_ProjectWhereUniqueInput
}

input Portfolio_ProjectCreateWithoutQuestionsInput {
  id: String
  name: String!
  image: String!
  type: String!
  github_url: String!
  app_url: String!
  summary: String!
  createdAt: Portfolio_DateTime
  updatedAt: Portfolio_DateTime
  tech_categories: Portfolio_TechCategoryCreateNestedManyWithoutProjectInput
  sketches: Portfolio_SketchCreateNestedManyWithoutProjectInput
  admin: Portfolio_AdminCreateNestedOneWithoutProjectsInput!
}

input Portfolio_AdminCreateNestedOneWithoutProjectsInput {
  create: Portfolio_AdminCreateWithoutProjectsInput
  connectOrCreate: Portfolio_AdminCreateOrConnectWithoutProjectsInput
  connect: Portfolio_AdminWhereUniqueInput
}

input Portfolio_AdminCreateWithoutProjectsInput {
  id: String
  email: String!
  fname: String!
  lname: String!
  linkedIn: String!
  whatsapp: String!
  instagram: String!
  github: String!
  heroImage: String!
  confirmed: Boolean
  isPublished: Boolean
  password: String!
  createdAt: Portfolio_DateTime
  updatedAt: Portfolio_DateTime
  stack: Portfolio_AdminCreatestackInput
  resumes: Portfolio_AdminCreateresumesInput
  stacks: Portfolio_AdminCreatestacksInput
  about: Portfolio_AboutCreateNestedManyWithoutAdminInput
  messages: Portfolio_MessageCreateNestedManyWithoutAdminInput
}

input Portfolio_AboutCreateNestedManyWithoutAdminInput {
  create: [Portfolio_AboutCreateWithoutAdminInput!]
  connectOrCreate: [Portfolio_AboutCreateOrConnectWithoutAdminInput!]
  createMany: Portfolio_AboutCreateManyAdminInputEnvelope
  connect: [Portfolio_AboutWhereUniqueInput!]
}

input Portfolio_AboutCreateWithoutAdminInput {
  id: String
  title: String!
  body: String!
  updatedAt: Portfolio_DateTime
}

input Portfolio_AboutCreateOrConnectWithoutAdminInput {
  where: Portfolio_AboutWhereUniqueInput!
  create: Portfolio_AboutCreateWithoutAdminInput!
}

input Portfolio_AboutCreateManyAdminInputEnvelope {
  data: [Portfolio_AboutCreateManyAdminInput!]!
  skipDuplicates: Boolean
}

input Portfolio_AboutCreateManyAdminInput {
  id: String
  title: String!
  body: String!
  updatedAt: Portfolio_DateTime
}

input Portfolio_AdminCreateOrConnectWithoutProjectsInput {
  where: Portfolio_AdminWhereUniqueInput!
  create: Portfolio_AdminCreateWithoutProjectsInput!
}

input Portfolio_ProjectCreateOrConnectWithoutQuestionsInput {
  where: Portfolio_ProjectWhereUniqueInput!
  create: Portfolio_ProjectCreateWithoutQuestionsInput!
}

input Portfolio_QuestionCreateOrConnectWithoutAnswerInput {
  where: Portfolio_QuestionWhereUniqueInput!
  create: Portfolio_QuestionCreateWithoutAnswerInput!
}

input Portfolio_AnswerUpdateInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  answer: Portfolio_StringFieldUpdateOperationsInput
  question: Portfolio_QuestionUpdateOneWithoutAnswerInput
}

input Portfolio_QuestionUpdateOneWithoutAnswerInput {
  create: Portfolio_QuestionCreateWithoutAnswerInput
  connectOrCreate: Portfolio_QuestionCreateOrConnectWithoutAnswerInput
  upsert: Portfolio_QuestionUpsertWithoutAnswerInput
  connect: Portfolio_QuestionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: Portfolio_QuestionUpdateWithoutAnswerInput
}

input Portfolio_QuestionUpsertWithoutAnswerInput {
  update: Portfolio_QuestionUpdateWithoutAnswerInput!
  create: Portfolio_QuestionCreateWithoutAnswerInput!
}

input Portfolio_QuestionUpdateWithoutAnswerInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  question: Portfolio_StringFieldUpdateOperationsInput
  project: Portfolio_ProjectUpdateOneRequiredWithoutQuestionsInput
}

input Portfolio_ProjectUpdateOneRequiredWithoutQuestionsInput {
  create: Portfolio_ProjectCreateWithoutQuestionsInput
  connectOrCreate: Portfolio_ProjectCreateOrConnectWithoutQuestionsInput
  upsert: Portfolio_ProjectUpsertWithoutQuestionsInput
  connect: Portfolio_ProjectWhereUniqueInput
  update: Portfolio_ProjectUpdateWithoutQuestionsInput
}

input Portfolio_ProjectUpsertWithoutQuestionsInput {
  update: Portfolio_ProjectUpdateWithoutQuestionsInput!
  create: Portfolio_ProjectCreateWithoutQuestionsInput!
}

input Portfolio_ProjectUpdateWithoutQuestionsInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  name: Portfolio_StringFieldUpdateOperationsInput
  image: Portfolio_StringFieldUpdateOperationsInput
  type: Portfolio_StringFieldUpdateOperationsInput
  github_url: Portfolio_StringFieldUpdateOperationsInput
  app_url: Portfolio_StringFieldUpdateOperationsInput
  summary: Portfolio_StringFieldUpdateOperationsInput
  createdAt: Portfolio_DateTimeFieldUpdateOperationsInput
  updatedAt: Portfolio_DateTimeFieldUpdateOperationsInput
  tech_categories: Portfolio_TechCategoryUpdateManyWithoutProjectInput
  sketches: Portfolio_SketchUpdateManyWithoutProjectInput
  admin: Portfolio_AdminUpdateOneRequiredWithoutProjectsInput
}

input Portfolio_AdminUpdateOneRequiredWithoutProjectsInput {
  create: Portfolio_AdminCreateWithoutProjectsInput
  connectOrCreate: Portfolio_AdminCreateOrConnectWithoutProjectsInput
  upsert: Portfolio_AdminUpsertWithoutProjectsInput
  connect: Portfolio_AdminWhereUniqueInput
  update: Portfolio_AdminUpdateWithoutProjectsInput
}

input Portfolio_AdminUpsertWithoutProjectsInput {
  update: Portfolio_AdminUpdateWithoutProjectsInput!
  create: Portfolio_AdminCreateWithoutProjectsInput!
}

input Portfolio_AdminUpdateWithoutProjectsInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  email: Portfolio_StringFieldUpdateOperationsInput
  fname: Portfolio_StringFieldUpdateOperationsInput
  lname: Portfolio_StringFieldUpdateOperationsInput
  linkedIn: Portfolio_StringFieldUpdateOperationsInput
  whatsapp: Portfolio_StringFieldUpdateOperationsInput
  instagram: Portfolio_StringFieldUpdateOperationsInput
  github: Portfolio_StringFieldUpdateOperationsInput
  heroImage: Portfolio_StringFieldUpdateOperationsInput
  confirmed: Portfolio_BoolFieldUpdateOperationsInput
  isPublished: Portfolio_BoolFieldUpdateOperationsInput
  password: Portfolio_StringFieldUpdateOperationsInput
  createdAt: Portfolio_DateTimeFieldUpdateOperationsInput
  updatedAt: Portfolio_DateTimeFieldUpdateOperationsInput
  stack: Portfolio_AdminUpdatestackInput
  resumes: Portfolio_AdminUpdateresumesInput
  stacks: Portfolio_AdminUpdatestacksInput
  about: Portfolio_AboutUpdateManyWithoutAdminInput
  messages: Portfolio_MessageUpdateManyWithoutAdminInput
}

input Portfolio_AboutUpdateManyWithoutAdminInput {
  create: [Portfolio_AboutCreateWithoutAdminInput!]
  connectOrCreate: [Portfolio_AboutCreateOrConnectWithoutAdminInput!]
  upsert: [Portfolio_AboutUpsertWithWhereUniqueWithoutAdminInput!]
  createMany: Portfolio_AboutCreateManyAdminInputEnvelope
  connect: [Portfolio_AboutWhereUniqueInput!]
  set: [Portfolio_AboutWhereUniqueInput!]
  disconnect: [Portfolio_AboutWhereUniqueInput!]
  delete: [Portfolio_AboutWhereUniqueInput!]
  update: [Portfolio_AboutUpdateWithWhereUniqueWithoutAdminInput!]
  updateMany: [Portfolio_AboutUpdateManyWithWhereWithoutAdminInput!]
  deleteMany: [Portfolio_AboutScalarWhereInput!]
}

input Portfolio_AboutUpsertWithWhereUniqueWithoutAdminInput {
  where: Portfolio_AboutWhereUniqueInput!
  update: Portfolio_AboutUpdateWithoutAdminInput!
  create: Portfolio_AboutCreateWithoutAdminInput!
}

input Portfolio_AboutUpdateWithoutAdminInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  title: Portfolio_StringFieldUpdateOperationsInput
  body: Portfolio_StringFieldUpdateOperationsInput
  updatedAt: Portfolio_DateTimeFieldUpdateOperationsInput
}

input Portfolio_AboutUpdateWithWhereUniqueWithoutAdminInput {
  where: Portfolio_AboutWhereUniqueInput!
  data: Portfolio_AboutUpdateWithoutAdminInput!
}

input Portfolio_AboutUpdateManyWithWhereWithoutAdminInput {
  where: Portfolio_AboutScalarWhereInput!
  data: Portfolio_AboutUpdateManyMutationInput!
}

input Portfolio_AboutScalarWhereInput {
  AND: [Portfolio_AboutScalarWhereInput!]
  OR: [Portfolio_AboutScalarWhereInput!]
  NOT: [Portfolio_AboutScalarWhereInput!]
  id: Portfolio_StringFilter
  title: Portfolio_StringFilter
  body: Portfolio_StringFilter
  admin_id: Portfolio_StringFilter
  updatedAt: Portfolio_DateTimeFilter
}

input Portfolio_AboutUpdateManyMutationInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  title: Portfolio_StringFieldUpdateOperationsInput
  body: Portfolio_StringFieldUpdateOperationsInput
  updatedAt: Portfolio_DateTimeFieldUpdateOperationsInput
}

input Portfolio_MessageCreateInput {
  id: String
  subject: String!
  from: String!
  body: String!
  read_status: Boolean
  answer_status: Boolean
  answeredAt: Portfolio_DateTime
  createdAd: Portfolio_DateTime
  admin: Portfolio_AdminCreateNestedOneWithoutMessagesInput!
}

input Portfolio_AdminCreateNestedOneWithoutMessagesInput {
  create: Portfolio_AdminCreateWithoutMessagesInput
  connectOrCreate: Portfolio_AdminCreateOrConnectWithoutMessagesInput
  connect: Portfolio_AdminWhereUniqueInput
}

input Portfolio_AdminCreateWithoutMessagesInput {
  id: String
  email: String!
  fname: String!
  lname: String!
  linkedIn: String!
  whatsapp: String!
  instagram: String!
  github: String!
  heroImage: String!
  confirmed: Boolean
  isPublished: Boolean
  password: String!
  createdAt: Portfolio_DateTime
  updatedAt: Portfolio_DateTime
  stack: Portfolio_AdminCreatestackInput
  resumes: Portfolio_AdminCreateresumesInput
  stacks: Portfolio_AdminCreatestacksInput
  about: Portfolio_AboutCreateNestedManyWithoutAdminInput
  projects: Portfolio_ProjectCreateNestedManyWithoutAdminInput
}

input Portfolio_AdminCreateOrConnectWithoutMessagesInput {
  where: Portfolio_AdminWhereUniqueInput!
  create: Portfolio_AdminCreateWithoutMessagesInput!
}

input Portfolio_MessageUpdateInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  subject: Portfolio_StringFieldUpdateOperationsInput
  from: Portfolio_StringFieldUpdateOperationsInput
  body: Portfolio_StringFieldUpdateOperationsInput
  read_status: Portfolio_BoolFieldUpdateOperationsInput
  answer_status: Portfolio_BoolFieldUpdateOperationsInput
  answeredAt: Portfolio_DateTimeFieldUpdateOperationsInput
  createdAd: Portfolio_DateTimeFieldUpdateOperationsInput
  admin: Portfolio_AdminUpdateOneRequiredWithoutMessagesInput
}

input Portfolio_AdminUpdateOneRequiredWithoutMessagesInput {
  create: Portfolio_AdminCreateWithoutMessagesInput
  connectOrCreate: Portfolio_AdminCreateOrConnectWithoutMessagesInput
  upsert: Portfolio_AdminUpsertWithoutMessagesInput
  connect: Portfolio_AdminWhereUniqueInput
  update: Portfolio_AdminUpdateWithoutMessagesInput
}

input Portfolio_AdminUpsertWithoutMessagesInput {
  update: Portfolio_AdminUpdateWithoutMessagesInput!
  create: Portfolio_AdminCreateWithoutMessagesInput!
}

input Portfolio_AdminUpdateWithoutMessagesInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  email: Portfolio_StringFieldUpdateOperationsInput
  fname: Portfolio_StringFieldUpdateOperationsInput
  lname: Portfolio_StringFieldUpdateOperationsInput
  linkedIn: Portfolio_StringFieldUpdateOperationsInput
  whatsapp: Portfolio_StringFieldUpdateOperationsInput
  instagram: Portfolio_StringFieldUpdateOperationsInput
  github: Portfolio_StringFieldUpdateOperationsInput
  heroImage: Portfolio_StringFieldUpdateOperationsInput
  confirmed: Portfolio_BoolFieldUpdateOperationsInput
  isPublished: Portfolio_BoolFieldUpdateOperationsInput
  password: Portfolio_StringFieldUpdateOperationsInput
  createdAt: Portfolio_DateTimeFieldUpdateOperationsInput
  updatedAt: Portfolio_DateTimeFieldUpdateOperationsInput
  stack: Portfolio_AdminUpdatestackInput
  resumes: Portfolio_AdminUpdateresumesInput
  stacks: Portfolio_AdminUpdatestacksInput
  about: Portfolio_AboutUpdateManyWithoutAdminInput
  projects: Portfolio_ProjectUpdateManyWithoutAdminInput
}

input Portfolio_ProjectCreateInput {
  id: String
  name: String!
  image: String!
  type: String!
  github_url: String!
  app_url: String!
  summary: String!
  createdAt: Portfolio_DateTime
  updatedAt: Portfolio_DateTime
  tech_categories: Portfolio_TechCategoryCreateNestedManyWithoutProjectInput
  questions: Portfolio_QuestionCreateNestedManyWithoutProjectInput
  sketches: Portfolio_SketchCreateNestedManyWithoutProjectInput
  admin: Portfolio_AdminCreateNestedOneWithoutProjectsInput!
}

input Portfolio_ProjectUpdateInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  name: Portfolio_StringFieldUpdateOperationsInput
  image: Portfolio_StringFieldUpdateOperationsInput
  type: Portfolio_StringFieldUpdateOperationsInput
  github_url: Portfolio_StringFieldUpdateOperationsInput
  app_url: Portfolio_StringFieldUpdateOperationsInput
  summary: Portfolio_StringFieldUpdateOperationsInput
  createdAt: Portfolio_DateTimeFieldUpdateOperationsInput
  updatedAt: Portfolio_DateTimeFieldUpdateOperationsInput
  tech_categories: Portfolio_TechCategoryUpdateManyWithoutProjectInput
  questions: Portfolio_QuestionUpdateManyWithoutProjectInput
  sketches: Portfolio_SketchUpdateManyWithoutProjectInput
  admin: Portfolio_AdminUpdateOneRequiredWithoutProjectsInput
}

input Portfolio_QuestionCreateInput {
  id: String
  question: String!
  answer: Portfolio_AnswerCreateNestedOneWithoutQuestionInput!
  project: Portfolio_ProjectCreateNestedOneWithoutQuestionsInput!
}

input Portfolio_QuestionUpdateInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  question: Portfolio_StringFieldUpdateOperationsInput
  answer: Portfolio_AnswerUpdateOneRequiredWithoutQuestionInput
  project: Portfolio_ProjectUpdateOneRequiredWithoutQuestionsInput
}

input Portfolio_SketchCreateInput {
  id: String
  title: String!
  description: String!
  summary: String!
  download_link: String!
  image: String!
  project: Portfolio_ProjectCreateNestedOneWithoutSketchesInput!
}

input Portfolio_ProjectCreateNestedOneWithoutSketchesInput {
  create: Portfolio_ProjectCreateWithoutSketchesInput
  connectOrCreate: Portfolio_ProjectCreateOrConnectWithoutSketchesInput
  connect: Portfolio_ProjectWhereUniqueInput
}

input Portfolio_ProjectCreateWithoutSketchesInput {
  id: String
  name: String!
  image: String!
  type: String!
  github_url: String!
  app_url: String!
  summary: String!
  createdAt: Portfolio_DateTime
  updatedAt: Portfolio_DateTime
  tech_categories: Portfolio_TechCategoryCreateNestedManyWithoutProjectInput
  questions: Portfolio_QuestionCreateNestedManyWithoutProjectInput
  admin: Portfolio_AdminCreateNestedOneWithoutProjectsInput!
}

input Portfolio_ProjectCreateOrConnectWithoutSketchesInput {
  where: Portfolio_ProjectWhereUniqueInput!
  create: Portfolio_ProjectCreateWithoutSketchesInput!
}

input Portfolio_SketchUpdateInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  title: Portfolio_StringFieldUpdateOperationsInput
  description: Portfolio_StringFieldUpdateOperationsInput
  summary: Portfolio_StringFieldUpdateOperationsInput
  download_link: Portfolio_StringFieldUpdateOperationsInput
  image: Portfolio_StringFieldUpdateOperationsInput
  project: Portfolio_ProjectUpdateOneRequiredWithoutSketchesInput
}

input Portfolio_ProjectUpdateOneRequiredWithoutSketchesInput {
  create: Portfolio_ProjectCreateWithoutSketchesInput
  connectOrCreate: Portfolio_ProjectCreateOrConnectWithoutSketchesInput
  upsert: Portfolio_ProjectUpsertWithoutSketchesInput
  connect: Portfolio_ProjectWhereUniqueInput
  update: Portfolio_ProjectUpdateWithoutSketchesInput
}

input Portfolio_ProjectUpsertWithoutSketchesInput {
  update: Portfolio_ProjectUpdateWithoutSketchesInput!
  create: Portfolio_ProjectCreateWithoutSketchesInput!
}

input Portfolio_ProjectUpdateWithoutSketchesInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  name: Portfolio_StringFieldUpdateOperationsInput
  image: Portfolio_StringFieldUpdateOperationsInput
  type: Portfolio_StringFieldUpdateOperationsInput
  github_url: Portfolio_StringFieldUpdateOperationsInput
  app_url: Portfolio_StringFieldUpdateOperationsInput
  summary: Portfolio_StringFieldUpdateOperationsInput
  createdAt: Portfolio_DateTimeFieldUpdateOperationsInput
  updatedAt: Portfolio_DateTimeFieldUpdateOperationsInput
  tech_categories: Portfolio_TechCategoryUpdateManyWithoutProjectInput
  questions: Portfolio_QuestionUpdateManyWithoutProjectInput
  admin: Portfolio_AdminUpdateOneRequiredWithoutProjectsInput
}

input Portfolio_TechCreateInput {
  id: String
  name: String!
  tech_categories: Portfolio_TechCategoryCreateNestedOneWithoutTechsInput!
}

input Portfolio_TechCategoryCreateNestedOneWithoutTechsInput {
  create: Portfolio_TechCategoryCreateWithoutTechsInput
  connectOrCreate: Portfolio_TechCategoryCreateOrConnectWithoutTechsInput
  connect: Portfolio_TechCategoryWhereUniqueInput
}

input Portfolio_TechCategoryCreateWithoutTechsInput {
  id: String
  name: String!
  project: Portfolio_ProjectCreateNestedOneWithoutTech_categoriesInput!
}

input Portfolio_ProjectCreateNestedOneWithoutTech_categoriesInput {
  create: Portfolio_ProjectCreateWithoutTech_categoriesInput
  connectOrCreate: Portfolio_ProjectCreateOrConnectWithoutTech_categoriesInput
  connect: Portfolio_ProjectWhereUniqueInput
}

input Portfolio_ProjectCreateWithoutTech_categoriesInput {
  id: String
  name: String!
  image: String!
  type: String!
  github_url: String!
  app_url: String!
  summary: String!
  createdAt: Portfolio_DateTime
  updatedAt: Portfolio_DateTime
  questions: Portfolio_QuestionCreateNestedManyWithoutProjectInput
  sketches: Portfolio_SketchCreateNestedManyWithoutProjectInput
  admin: Portfolio_AdminCreateNestedOneWithoutProjectsInput!
}

input Portfolio_ProjectCreateOrConnectWithoutTech_categoriesInput {
  where: Portfolio_ProjectWhereUniqueInput!
  create: Portfolio_ProjectCreateWithoutTech_categoriesInput!
}

input Portfolio_TechCategoryCreateOrConnectWithoutTechsInput {
  where: Portfolio_TechCategoryWhereUniqueInput!
  create: Portfolio_TechCategoryCreateWithoutTechsInput!
}

input Portfolio_TechUpdateInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  name: Portfolio_StringFieldUpdateOperationsInput
  tech_categories: Portfolio_TechCategoryUpdateOneRequiredWithoutTechsInput
}

input Portfolio_TechCategoryUpdateOneRequiredWithoutTechsInput {
  create: Portfolio_TechCategoryCreateWithoutTechsInput
  connectOrCreate: Portfolio_TechCategoryCreateOrConnectWithoutTechsInput
  upsert: Portfolio_TechCategoryUpsertWithoutTechsInput
  connect: Portfolio_TechCategoryWhereUniqueInput
  update: Portfolio_TechCategoryUpdateWithoutTechsInput
}

input Portfolio_TechCategoryUpsertWithoutTechsInput {
  update: Portfolio_TechCategoryUpdateWithoutTechsInput!
  create: Portfolio_TechCategoryCreateWithoutTechsInput!
}

input Portfolio_TechCategoryUpdateWithoutTechsInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  name: Portfolio_StringFieldUpdateOperationsInput
  project: Portfolio_ProjectUpdateOneRequiredWithoutTech_categoriesInput
}

input Portfolio_ProjectUpdateOneRequiredWithoutTech_categoriesInput {
  create: Portfolio_ProjectCreateWithoutTech_categoriesInput
  connectOrCreate: Portfolio_ProjectCreateOrConnectWithoutTech_categoriesInput
  upsert: Portfolio_ProjectUpsertWithoutTech_categoriesInput
  connect: Portfolio_ProjectWhereUniqueInput
  update: Portfolio_ProjectUpdateWithoutTech_categoriesInput
}

input Portfolio_ProjectUpsertWithoutTech_categoriesInput {
  update: Portfolio_ProjectUpdateWithoutTech_categoriesInput!
  create: Portfolio_ProjectCreateWithoutTech_categoriesInput!
}

input Portfolio_ProjectUpdateWithoutTech_categoriesInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  name: Portfolio_StringFieldUpdateOperationsInput
  image: Portfolio_StringFieldUpdateOperationsInput
  type: Portfolio_StringFieldUpdateOperationsInput
  github_url: Portfolio_StringFieldUpdateOperationsInput
  app_url: Portfolio_StringFieldUpdateOperationsInput
  summary: Portfolio_StringFieldUpdateOperationsInput
  createdAt: Portfolio_DateTimeFieldUpdateOperationsInput
  updatedAt: Portfolio_DateTimeFieldUpdateOperationsInput
  questions: Portfolio_QuestionUpdateManyWithoutProjectInput
  sketches: Portfolio_SketchUpdateManyWithoutProjectInput
  admin: Portfolio_AdminUpdateOneRequiredWithoutProjectsInput
}

input Portfolio_TechCategoryCreateInput {
  id: String
  name: String!
  techs: Portfolio_TechCreateNestedManyWithoutTech_categoriesInput
  project: Portfolio_ProjectCreateNestedOneWithoutTech_categoriesInput!
}

input Portfolio_TechCategoryUpdateInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  name: Portfolio_StringFieldUpdateOperationsInput
  techs: Portfolio_TechUpdateManyWithoutTech_categoriesInput
  project: Portfolio_ProjectUpdateOneRequiredWithoutTech_categoriesInput
}

type Portfolio_LoginReturnType {
  token: String
}

input Portfolio_LoginInputType {
  email: String!
  password: String!
}

input Portfolio_AdminCreateInput {
  id: String
  email: String!
  fname: String!
  lname: String!
  linkedIn: String!
  whatsapp: String!
  instagram: String!
  github: String!
  heroImage: String!
  confirmed: Boolean
  isPublished: Boolean
  password: String!
  createdAt: Portfolio_DateTime
  updatedAt: Portfolio_DateTime
  stack: Portfolio_AdminCreatestackInput
  resumes: Portfolio_AdminCreateresumesInput
  stacks: Portfolio_AdminCreatestacksInput
  about: Portfolio_AboutCreateNestedManyWithoutAdminInput
  messages: Portfolio_MessageCreateNestedManyWithoutAdminInput
  projects: Portfolio_ProjectCreateNestedManyWithoutAdminInput
}

input Portfolio_AdminUpdateInput {
  id: Portfolio_StringFieldUpdateOperationsInput
  email: Portfolio_StringFieldUpdateOperationsInput
  fname: Portfolio_StringFieldUpdateOperationsInput
  lname: Portfolio_StringFieldUpdateOperationsInput
  linkedIn: Portfolio_StringFieldUpdateOperationsInput
  whatsapp: Portfolio_StringFieldUpdateOperationsInput
  instagram: Portfolio_StringFieldUpdateOperationsInput
  github: Portfolio_StringFieldUpdateOperationsInput
  heroImage: Portfolio_StringFieldUpdateOperationsInput
  confirmed: Portfolio_BoolFieldUpdateOperationsInput
  isPublished: Portfolio_BoolFieldUpdateOperationsInput
  password: Portfolio_StringFieldUpdateOperationsInput
  createdAt: Portfolio_DateTimeFieldUpdateOperationsInput
  updatedAt: Portfolio_DateTimeFieldUpdateOperationsInput
  stack: Portfolio_AdminUpdatestackInput
  resumes: Portfolio_AdminUpdateresumesInput
  stacks: Portfolio_AdminUpdatestacksInput
  about: Portfolio_AboutUpdateManyWithoutAdminInput
  messages: Portfolio_MessageUpdateManyWithoutAdminInput
  projects: Portfolio_ProjectUpdateManyWithoutAdminInput
}

# The `Upload` scalar type represents a file upload.
scalar Portfolio_Upload

type Portfolio {
  about(where: Portfolio_AboutWhereUniqueInput!): Portfolio_About
  abouts(where: Portfolio_AboutWhereInput, orderBy: [Portfolio_AboutOrderByWithRelationInput!], cursor: Portfolio_AboutWhereUniqueInput, take: Int, skip: Int, distinct: [Portfolio_AboutScalarFieldEnum!]): [Portfolio_About!]!
  answer(where: Portfolio_AnswerWhereUniqueInput!): Portfolio_Answer
  answers(where: Portfolio_AnswerWhereInput, orderBy: [Portfolio_AnswerOrderByWithRelationInput!], cursor: Portfolio_AnswerWhereUniqueInput, take: Int, skip: Int, distinct: [Portfolio_AnswerScalarFieldEnum!]): [Portfolio_Answer!]!
  message(where: Portfolio_MessageWhereUniqueInput!): Portfolio_Message
  messages(where: Portfolio_MessageWhereInput, orderBy: [Portfolio_MessageOrderByWithRelationInput!], cursor: Portfolio_MessageWhereUniqueInput, take: Int, skip: Int, distinct: [Portfolio_MessageScalarFieldEnum!]): [Portfolio_Message!]!
  project(where: Portfolio_ProjectWhereUniqueInput!): Portfolio_Project
  projects(where: Portfolio_ProjectWhereInput, orderBy: [Portfolio_ProjectOrderByWithRelationInput!], cursor: Portfolio_ProjectWhereUniqueInput, take: Int, skip: Int, distinct: [Portfolio_ProjectScalarFieldEnum!]): [Portfolio_Project!]!
  question(where: Portfolio_QuestionWhereUniqueInput!): Portfolio_Question
  questions(where: Portfolio_QuestionWhereInput, orderBy: [Portfolio_QuestionOrderByWithRelationInput!], cursor: Portfolio_QuestionWhereUniqueInput, take: Int, skip: Int, distinct: [Portfolio_QuestionScalarFieldEnum!]): [Portfolio_Question!]!
  sketch(where: Portfolio_SketchWhereUniqueInput!): Portfolio_Sketch
  sketches(where: Portfolio_SketchWhereInput, orderBy: [Portfolio_SketchOrderByWithRelationInput!], cursor: Portfolio_SketchWhereUniqueInput, take: Int, skip: Int, distinct: [Portfolio_SketchScalarFieldEnum!]): [Portfolio_Sketch!]!
  tech(where: Portfolio_TechWhereUniqueInput!): Portfolio_Tech
  teches(where: Portfolio_TechWhereInput, orderBy: [Portfolio_TechOrderByWithRelationInput!], cursor: Portfolio_TechWhereUniqueInput, take: Int, skip: Int, distinct: [Portfolio_TechScalarFieldEnum!]): [Portfolio_Tech!]!
  techCategory(where: Portfolio_TechCategoryWhereUniqueInput!): Portfolio_TechCategory
  techCategories(where: Portfolio_TechCategoryWhereInput, orderBy: [Portfolio_TechCategoryOrderByWithRelationInput!], cursor: Portfolio_TechCategoryWhereUniqueInput, take: Int, skip: Int, distinct: [Portfolio_TechCategoryScalarFieldEnum!]): [Portfolio_TechCategory!]!
  isThereAnAdmin: Boolean!
  me: Portfolio_Admin
  getAdmin: Portfolio_Admin!
  getNumOfAdmins: Int
}

type Query {
  file(sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, ino: FloatQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, publicURL: StringQueryOperatorInput, childrenImageSharp: ImageSharpFilterListInput, childImageSharp: ImageSharpFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): File
  allFile(filter: FileFilterInput, sort: FileSortInput, skip: Int, limit: Int): FileConnection!
  directory(sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, ino: FloatQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Directory
  allDirectory(filter: DirectoryFilterInput, sort: DirectorySortInput, skip: Int, limit: Int): DirectoryConnection!
  site(buildTime: DateQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput, port: IntQueryOperatorInput, host: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, pathPrefix: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Site
  allSite(filter: SiteFilterInput, sort: SiteSortInput, skip: Int, limit: Int): SiteConnection!
  siteFunction(functionRoute: StringQueryOperatorInput, pluginName: StringQueryOperatorInput, originalAbsoluteFilePath: StringQueryOperatorInput, originalRelativeFilePath: StringQueryOperatorInput, relativeCompiledFilePath: StringQueryOperatorInput, absoluteCompiledFilePath: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SiteFunction
  allSiteFunction(filter: SiteFunctionFilterInput, sort: SiteFunctionSortInput, skip: Int, limit: Int): SiteFunctionConnection!
  sitePage(path: StringQueryOperatorInput, component: StringQueryOperatorInput, internalComponentName: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, isCreatedByStatefulCreatePages: BooleanQueryOperatorInput, pluginCreator: SitePluginFilterInput, pluginCreatorId: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SitePage
  allSitePage(filter: SitePageFilterInput, sort: SitePageSortInput, skip: Int, limit: Int): SitePageConnection!
  imageSharp(fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, gatsbyImageData: JSONQueryOperatorInput, original: ImageSharpOriginalFilterInput, resize: ImageSharpResizeFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ImageSharp
  allImageSharp(filter: ImageSharpFilterInput, sort: ImageSharpSortInput, skip: Int, limit: Int): ImageSharpConnection!
  sitePlugin(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, resolve: StringQueryOperatorInput, name: StringQueryOperatorInput, version: StringQueryOperatorInput, pluginOptions: SitePluginPluginOptionsFilterInput, nodeAPIs: StringQueryOperatorInput, browserAPIs: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, pluginFilepath: StringQueryOperatorInput, packageJson: SitePluginPackageJsonFilterInput): SitePlugin
  allSitePlugin(filter: SitePluginFilterInput, sort: SitePluginSortInput, skip: Int, limit: Int): SitePluginConnection!
  siteBuildMetadata(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, buildTime: DateQueryOperatorInput): SiteBuildMetadata
  allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, sort: SiteBuildMetadataSortInput, skip: Int, limit: Int): SiteBuildMetadataConnection!
  graphQlSource(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, typeName: StringQueryOperatorInput, fieldName: StringQueryOperatorInput): GraphQLSource
  allGraphQlSource(filter: GraphQLSourceFilterInput, sort: GraphQLSourceSortInput, skip: Int, limit: Int): GraphQLSourceConnection!
  staticImage(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, sourceInstanceName: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, blksize: IntQueryOperatorInput, ino: IntQueryOperatorInput, size: IntQueryOperatorInput, blocks: IntQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, birthtimeMs: IntQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput): StaticImage
  allStaticImage(filter: StaticImageFilterInput, sort: StaticImageSortInput, skip: Int, limit: Int): StaticImageConnection!
  portfolio: Portfolio!
}

input StringQueryOperatorInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  regex: String
  glob: String
}

input IntQueryOperatorInput {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input DateQueryOperatorInput {
  eq: Date
  ne: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  in: [Date]
  nin: [Date]
}

input FloatQueryOperatorInput {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input ImageSharpFilterListInput {
  elemMatch: ImageSharpFilterInput
}

input ImageSharpFilterInput {
  fixed: ImageSharpFixedFilterInput
  fluid: ImageSharpFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  original: ImageSharpOriginalFilterInput
  resize: ImageSharpResizeFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ImageSharpFixedFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
}

input ImageSharpFluidFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  sizes: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
}

input JSONQueryOperatorInput {
  eq: JSON
  ne: JSON
  in: [JSON]
  nin: [JSON]
  regex: JSON
  glob: JSON
}

input ImageSharpOriginalFilterInput {
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
}

input ImageSharpResizeFilterInput {
  src: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  originalName: StringQueryOperatorInput
}

input NodeFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input NodeFilterListInput {
  elemMatch: NodeFilterInput
}

input InternalFilterInput {
  content: StringQueryOperatorInput
  contentDigest: StringQueryOperatorInput
  description: StringQueryOperatorInput
  fieldOwners: StringQueryOperatorInput
  ignoreType: BooleanQueryOperatorInput
  mediaType: StringQueryOperatorInput
  owner: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input BooleanQueryOperatorInput {
  eq: Boolean
  ne: Boolean
  in: [Boolean]
  nin: [Boolean]
}

type FileConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  distinct(field: FileFieldsEnum!): [String!]!
  max(field: FileFieldsEnum!): Float
  min(field: FileFieldsEnum!): Float
  sum(field: FileFieldsEnum!): Float
  group(skip: Int, limit: Int, field: FileFieldsEnum!): [FileGroupConnection!]!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

type PageInfo {
  currentPage: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  itemCount: Int!
  pageCount: Int!
  perPage: Int
  totalCount: Int!
}

enum FileFieldsEnum {
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  ino
  atimeMs
  mtimeMs
  ctimeMs
  atime
  mtime
  ctime
  birthtime
  birthtimeMs
  blksize
  blocks
  publicURL
  childrenImageSharp
  childrenImageSharp___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___original___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___original___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___original___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___original___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___original___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___original___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type FileGroupConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input FileFilterInput {
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  ino: FloatQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  publicURL: StringQueryOperatorInput
  childrenImageSharp: ImageSharpFilterListInput
  childImageSharp: ImageSharpFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input FileSortInput {
  fields: [FileFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum SortOrderEnum {
  ASC
  DESC
}

type DirectoryConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  distinct(field: DirectoryFieldsEnum!): [String!]!
  max(field: DirectoryFieldsEnum!): Float
  min(field: DirectoryFieldsEnum!): Float
  sum(field: DirectoryFieldsEnum!): Float
  group(skip: Int, limit: Int, field: DirectoryFieldsEnum!): [DirectoryGroupConnection!]!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

enum DirectoryFieldsEnum {
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  ino
  atimeMs
  mtimeMs
  ctimeMs
  atime
  mtime
  ctime
  birthtime
  birthtimeMs
  blksize
  blocks
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type DirectoryGroupConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input DirectoryFilterInput {
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  ino: FloatQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input DirectorySortInput {
  fields: [DirectoryFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input SiteSiteMetadataFilterInput {
  title: StringQueryOperatorInput
  description: StringQueryOperatorInput
  author: StringQueryOperatorInput
  siteUrl: StringQueryOperatorInput
}

type SiteConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  distinct(field: SiteFieldsEnum!): [String!]!
  max(field: SiteFieldsEnum!): Float
  min(field: SiteFieldsEnum!): Float
  sum(field: SiteFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteFieldsEnum!): [SiteGroupConnection!]!
}

type SiteEdge {
  next: Site
  node: Site!
  previous: Site
}

enum SiteFieldsEnum {
  buildTime
  siteMetadata___title
  siteMetadata___description
  siteMetadata___author
  siteMetadata___siteUrl
  port
  host
  polyfill
  pathPrefix
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type SiteGroupConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SiteFilterInput {
  buildTime: DateQueryOperatorInput
  siteMetadata: SiteSiteMetadataFilterInput
  port: IntQueryOperatorInput
  host: StringQueryOperatorInput
  polyfill: BooleanQueryOperatorInput
  pathPrefix: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SiteSortInput {
  fields: [SiteFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteFunctionConnection {
  totalCount: Int!
  edges: [SiteFunctionEdge!]!
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  distinct(field: SiteFunctionFieldsEnum!): [String!]!
  max(field: SiteFunctionFieldsEnum!): Float
  min(field: SiteFunctionFieldsEnum!): Float
  sum(field: SiteFunctionFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteFunctionFieldsEnum!): [SiteFunctionGroupConnection!]!
}

type SiteFunctionEdge {
  next: SiteFunction
  node: SiteFunction!
  previous: SiteFunction
}

enum SiteFunctionFieldsEnum {
  functionRoute
  pluginName
  originalAbsoluteFilePath
  originalRelativeFilePath
  relativeCompiledFilePath
  absoluteCompiledFilePath
  matchPath
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type SiteFunctionGroupConnection {
  totalCount: Int!
  edges: [SiteFunctionEdge!]!
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SiteFunctionFilterInput {
  functionRoute: StringQueryOperatorInput
  pluginName: StringQueryOperatorInput
  originalAbsoluteFilePath: StringQueryOperatorInput
  originalRelativeFilePath: StringQueryOperatorInput
  relativeCompiledFilePath: StringQueryOperatorInput
  absoluteCompiledFilePath: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SiteFunctionSortInput {
  fields: [SiteFunctionFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input SitePluginFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  resolve: StringQueryOperatorInput
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
  pluginOptions: SitePluginPluginOptionsFilterInput
  nodeAPIs: StringQueryOperatorInput
  browserAPIs: StringQueryOperatorInput
  ssrAPIs: StringQueryOperatorInput
  pluginFilepath: StringQueryOperatorInput
  packageJson: SitePluginPackageJsonFilterInput
}

input SitePluginPluginOptionsFilterInput {
  base64Width: IntQueryOperatorInput
  stripMetadata: BooleanQueryOperatorInput
  defaultQuality: IntQueryOperatorInput
  failOnError: BooleanQueryOperatorInput
  autoFix: BooleanQueryOperatorInput
  language: StringQueryOperatorInput
  includeResolvers: BooleanQueryOperatorInput
  outputPath: StringQueryOperatorInput
  emitSchema: SitePluginPluginOptionsEmitSchemaFilterInput
  emitPluginDocuments: SitePluginPluginOptionsEmitPluginDocumentsFilterInput
  specialChars: StringQueryOperatorInput
  name: StringQueryOperatorInput
  path: StringQueryOperatorInput
  isTSX: BooleanQueryOperatorInput
  jsxPragma: StringQueryOperatorInput
  allExtensions: BooleanQueryOperatorInput
  typeName: StringQueryOperatorInput
  fieldName: StringQueryOperatorInput
  url: StringQueryOperatorInput
  pathCheck: BooleanQueryOperatorInput
}

input SitePluginPluginOptionsEmitSchemaFilterInput {
  _xsrcxxxgeneratedxxxgatsbyxschemaxgraphql: BooleanQueryOperatorInput
  _xsrcxxxgeneratedxxxgatsbyxintrospectionxjson: BooleanQueryOperatorInput
}

input SitePluginPluginOptionsEmitPluginDocumentsFilterInput {
  src___generated___gatsby_plugin_documents_graphql: BooleanQueryOperatorInput
}

input SitePluginPackageJsonFilterInput {
  name: StringQueryOperatorInput
  description: StringQueryOperatorInput
  version: StringQueryOperatorInput
  main: StringQueryOperatorInput
  license: StringQueryOperatorInput
  dependencies: SitePluginPackageJsonDependenciesFilterListInput
  devDependencies: SitePluginPackageJsonDevDependenciesFilterListInput
  peerDependencies: SitePluginPackageJsonPeerDependenciesFilterListInput
  keywords: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonDependenciesFilterInput
}

input SitePluginPackageJsonDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonDevDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonDevDependenciesFilterInput
}

input SitePluginPackageJsonDevDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonPeerDependenciesFilterInput
}

input SitePluginPackageJsonPeerDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

type SitePageConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  distinct(field: SitePageFieldsEnum!): [String!]!
  max(field: SitePageFieldsEnum!): Float
  min(field: SitePageFieldsEnum!): Float
  sum(field: SitePageFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SitePageFieldsEnum!): [SitePageGroupConnection!]!
}

type SitePageEdge {
  next: SitePage
  node: SitePage!
  previous: SitePage
}

enum SitePageFieldsEnum {
  path
  component
  internalComponentName
  componentChunkName
  matchPath
  isCreatedByStatefulCreatePages
  pluginCreator___id
  pluginCreator___parent___id
  pluginCreator___parent___parent___id
  pluginCreator___parent___parent___children
  pluginCreator___parent___children
  pluginCreator___parent___children___id
  pluginCreator___parent___children___children
  pluginCreator___parent___internal___content
  pluginCreator___parent___internal___contentDigest
  pluginCreator___parent___internal___description
  pluginCreator___parent___internal___fieldOwners
  pluginCreator___parent___internal___ignoreType
  pluginCreator___parent___internal___mediaType
  pluginCreator___parent___internal___owner
  pluginCreator___parent___internal___type
  pluginCreator___children
  pluginCreator___children___id
  pluginCreator___children___parent___id
  pluginCreator___children___parent___children
  pluginCreator___children___children
  pluginCreator___children___children___id
  pluginCreator___children___children___children
  pluginCreator___children___internal___content
  pluginCreator___children___internal___contentDigest
  pluginCreator___children___internal___description
  pluginCreator___children___internal___fieldOwners
  pluginCreator___children___internal___ignoreType
  pluginCreator___children___internal___mediaType
  pluginCreator___children___internal___owner
  pluginCreator___children___internal___type
  pluginCreator___internal___content
  pluginCreator___internal___contentDigest
  pluginCreator___internal___description
  pluginCreator___internal___fieldOwners
  pluginCreator___internal___ignoreType
  pluginCreator___internal___mediaType
  pluginCreator___internal___owner
  pluginCreator___internal___type
  pluginCreator___resolve
  pluginCreator___name
  pluginCreator___version
  pluginCreator___pluginOptions___base64Width
  pluginCreator___pluginOptions___stripMetadata
  pluginCreator___pluginOptions___defaultQuality
  pluginCreator___pluginOptions___failOnError
  pluginCreator___pluginOptions___autoFix
  pluginCreator___pluginOptions___language
  pluginCreator___pluginOptions___includeResolvers
  pluginCreator___pluginOptions___outputPath
  pluginCreator___pluginOptions___emitSchema____xsrcxxxgeneratedxxxgatsbyxschemaxgraphql
  pluginCreator___pluginOptions___emitSchema____xsrcxxxgeneratedxxxgatsbyxintrospectionxjson
  pluginCreator___pluginOptions___emitPluginDocuments___src___generated___gatsby_plugin_documents_graphql
  pluginCreator___pluginOptions___specialChars
  pluginCreator___pluginOptions___name
  pluginCreator___pluginOptions___path
  pluginCreator___pluginOptions___isTSX
  pluginCreator___pluginOptions___jsxPragma
  pluginCreator___pluginOptions___allExtensions
  pluginCreator___pluginOptions___typeName
  pluginCreator___pluginOptions___fieldName
  pluginCreator___pluginOptions___url
  pluginCreator___pluginOptions___pathCheck
  pluginCreator___nodeAPIs
  pluginCreator___browserAPIs
  pluginCreator___ssrAPIs
  pluginCreator___pluginFilepath
  pluginCreator___packageJson___name
  pluginCreator___packageJson___description
  pluginCreator___packageJson___version
  pluginCreator___packageJson___main
  pluginCreator___packageJson___license
  pluginCreator___packageJson___dependencies
  pluginCreator___packageJson___dependencies___name
  pluginCreator___packageJson___dependencies___version
  pluginCreator___packageJson___devDependencies
  pluginCreator___packageJson___devDependencies___name
  pluginCreator___packageJson___devDependencies___version
  pluginCreator___packageJson___peerDependencies
  pluginCreator___packageJson___peerDependencies___name
  pluginCreator___packageJson___peerDependencies___version
  pluginCreator___packageJson___keywords
  pluginCreatorId
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type SitePageGroupConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SitePageFilterInput {
  path: StringQueryOperatorInput
  component: StringQueryOperatorInput
  internalComponentName: StringQueryOperatorInput
  componentChunkName: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  isCreatedByStatefulCreatePages: BooleanQueryOperatorInput
  pluginCreator: SitePluginFilterInput
  pluginCreatorId: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SitePageSortInput {
  fields: [SitePageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type ImageSharpConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  distinct(field: ImageSharpFieldsEnum!): [String!]!
  max(field: ImageSharpFieldsEnum!): Float
  min(field: ImageSharpFieldsEnum!): Float
  sum(field: ImageSharpFieldsEnum!): Float
  group(skip: Int, limit: Int, field: ImageSharpFieldsEnum!): [ImageSharpGroupConnection!]!
}

type ImageSharpEdge {
  next: ImageSharp
  node: ImageSharp!
  previous: ImageSharp
}

enum ImageSharpFieldsEnum {
  fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  original___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  original___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  original___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
}

type ImageSharpGroupConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input ImageSharpSortInput {
  fields: [ImageSharpFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SitePluginConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  distinct(field: SitePluginFieldsEnum!): [String!]!
  max(field: SitePluginFieldsEnum!): Float
  min(field: SitePluginFieldsEnum!): Float
  sum(field: SitePluginFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SitePluginFieldsEnum!): [SitePluginGroupConnection!]!
}

type SitePluginEdge {
  next: SitePlugin
  node: SitePlugin!
  previous: SitePlugin
}

enum SitePluginFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  resolve
  name
  version
  pluginOptions___base64Width
  pluginOptions___stripMetadata
  pluginOptions___defaultQuality
  pluginOptions___failOnError
  pluginOptions___autoFix
  pluginOptions___language
  pluginOptions___includeResolvers
  pluginOptions___outputPath
  pluginOptions___emitSchema____xsrcxxxgeneratedxxxgatsbyxschemaxgraphql
  pluginOptions___emitSchema____xsrcxxxgeneratedxxxgatsbyxintrospectionxjson
  pluginOptions___emitPluginDocuments___src___generated___gatsby_plugin_documents_graphql
  pluginOptions___specialChars
  pluginOptions___name
  pluginOptions___path
  pluginOptions___isTSX
  pluginOptions___jsxPragma
  pluginOptions___allExtensions
  pluginOptions___typeName
  pluginOptions___fieldName
  pluginOptions___url
  pluginOptions___pathCheck
  nodeAPIs
  browserAPIs
  ssrAPIs
  pluginFilepath
  packageJson___name
  packageJson___description
  packageJson___version
  packageJson___main
  packageJson___license
  packageJson___dependencies
  packageJson___dependencies___name
  packageJson___dependencies___version
  packageJson___devDependencies
  packageJson___devDependencies___name
  packageJson___devDependencies___version
  packageJson___peerDependencies
  packageJson___peerDependencies___name
  packageJson___peerDependencies___version
  packageJson___keywords
}

type SitePluginGroupConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SitePluginSortInput {
  fields: [SitePluginFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteBuildMetadataConnection {
  totalCount: Int!
  edges: [SiteBuildMetadataEdge!]!
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
  max(field: SiteBuildMetadataFieldsEnum!): Float
  min(field: SiteBuildMetadataFieldsEnum!): Float
  sum(field: SiteBuildMetadataFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteBuildMetadataFieldsEnum!): [SiteBuildMetadataGroupConnection!]!
}

type SiteBuildMetadataEdge {
  next: SiteBuildMetadata
  node: SiteBuildMetadata!
  previous: SiteBuildMetadata
}

enum SiteBuildMetadataFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  buildTime
}

type SiteBuildMetadataGroupConnection {
  totalCount: Int!
  edges: [SiteBuildMetadataEdge!]!
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SiteBuildMetadataFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  buildTime: DateQueryOperatorInput
}

input SiteBuildMetadataSortInput {
  fields: [SiteBuildMetadataFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type GraphQLSourceConnection {
  totalCount: Int!
  edges: [GraphQLSourceEdge!]!
  nodes: [GraphQLSource!]!
  pageInfo: PageInfo!
  distinct(field: GraphQLSourceFieldsEnum!): [String!]!
  max(field: GraphQLSourceFieldsEnum!): Float
  min(field: GraphQLSourceFieldsEnum!): Float
  sum(field: GraphQLSourceFieldsEnum!): Float
  group(skip: Int, limit: Int, field: GraphQLSourceFieldsEnum!): [GraphQLSourceGroupConnection!]!
}

type GraphQLSourceEdge {
  next: GraphQLSource
  node: GraphQLSource!
  previous: GraphQLSource
}

enum GraphQLSourceFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  typeName
  fieldName
}

type GraphQLSourceGroupConnection {
  totalCount: Int!
  edges: [GraphQLSourceEdge!]!
  nodes: [GraphQLSource!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input GraphQLSourceFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  typeName: StringQueryOperatorInput
  fieldName: StringQueryOperatorInput
}

input GraphQLSourceSortInput {
  fields: [GraphQLSourceFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type StaticImageConnection {
  totalCount: Int!
  edges: [StaticImageEdge!]!
  nodes: [StaticImage!]!
  pageInfo: PageInfo!
  distinct(field: StaticImageFieldsEnum!): [String!]!
  max(field: StaticImageFieldsEnum!): Float
  min(field: StaticImageFieldsEnum!): Float
  sum(field: StaticImageFieldsEnum!): Float
  group(skip: Int, limit: Int, field: StaticImageFieldsEnum!): [StaticImageGroupConnection!]!
}

type StaticImageEdge {
  next: StaticImage
  node: StaticImage!
  previous: StaticImage
}

enum StaticImageFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  sourceInstanceName
  relativePath
  extension
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  absolutePath
  relativeDirectory
  dev
  mode
  nlink
  uid
  rdev
  blksize
  ino
  size
  blocks
  atimeMs
  mtimeMs
  ctimeMs
  birthtimeMs
  atime
  mtime
  ctime
  birthtime
}

type StaticImageGroupConnection {
  totalCount: Int!
  edges: [StaticImageEdge!]!
  nodes: [StaticImage!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input StaticImageFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  sourceInstanceName: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  blksize: IntQueryOperatorInput
  ino: IntQueryOperatorInput
  size: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  birthtimeMs: IntQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
}

input StaticImageSortInput {
  fields: [StaticImageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

import { GraphQLResolveInfo } from "graphql";
import { AggregateTechArgs } from "./args/AggregateTechArgs";
import { CreateManyTechArgs } from "./args/CreateManyTechArgs";
import { CreateTechArgs } from "./args/CreateTechArgs";
import { DeleteManyTechArgs } from "./args/DeleteManyTechArgs";
import { DeleteTechArgs } from "./args/DeleteTechArgs";
import { FindFirstTechArgs } from "./args/FindFirstTechArgs";
import { FindManyTechArgs } from "./args/FindManyTechArgs";
import { FindUniqueTechArgs } from "./args/FindUniqueTechArgs";
import { GroupByTechArgs } from "./args/GroupByTechArgs";
import { UpdateManyTechArgs } from "./args/UpdateManyTechArgs";
import { UpdateTechArgs } from "./args/UpdateTechArgs";
import { UpsertTechArgs } from "./args/UpsertTechArgs";
import { Tech } from "../../../models/Tech";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateTech } from "../../outputs/AggregateTech";
import { TechGroupBy } from "../../outputs/TechGroupBy";
export declare class TechCrudResolver {
    tech(ctx: any, info: GraphQLResolveInfo, args: FindUniqueTechArgs): Promise<Tech | null>;
    findFirstTech(ctx: any, info: GraphQLResolveInfo, args: FindFirstTechArgs): Promise<Tech | null>;
    teches(ctx: any, info: GraphQLResolveInfo, args: FindManyTechArgs): Promise<Tech[]>;
    createTech(ctx: any, info: GraphQLResolveInfo, args: CreateTechArgs): Promise<Tech>;
    createManyTech(ctx: any, info: GraphQLResolveInfo, args: CreateManyTechArgs): Promise<AffectedRowsOutput>;
    deleteTech(ctx: any, info: GraphQLResolveInfo, args: DeleteTechArgs): Promise<Tech | null>;
    updateTech(ctx: any, info: GraphQLResolveInfo, args: UpdateTechArgs): Promise<Tech | null>;
    deleteManyTech(ctx: any, info: GraphQLResolveInfo, args: DeleteManyTechArgs): Promise<AffectedRowsOutput>;
    updateManyTech(ctx: any, info: GraphQLResolveInfo, args: UpdateManyTechArgs): Promise<AffectedRowsOutput>;
    upsertTech(ctx: any, info: GraphQLResolveInfo, args: UpsertTechArgs): Promise<Tech>;
    aggregateTech(ctx: any, info: GraphQLResolveInfo, args: AggregateTechArgs): Promise<AggregateTech>;
    groupByTech(ctx: any, info: GraphQLResolveInfo, args: GroupByTechArgs): Promise<TechGroupBy[]>;
}

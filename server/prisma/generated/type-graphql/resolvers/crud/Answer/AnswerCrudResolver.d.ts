import { GraphQLResolveInfo } from "graphql";
import { AggregateAnswerArgs } from "./args/AggregateAnswerArgs";
import { CreateAnswerArgs } from "./args/CreateAnswerArgs";
import { CreateManyAnswerArgs } from "./args/CreateManyAnswerArgs";
import { DeleteAnswerArgs } from "./args/DeleteAnswerArgs";
import { DeleteManyAnswerArgs } from "./args/DeleteManyAnswerArgs";
import { FindFirstAnswerArgs } from "./args/FindFirstAnswerArgs";
import { FindManyAnswerArgs } from "./args/FindManyAnswerArgs";
import { FindUniqueAnswerArgs } from "./args/FindUniqueAnswerArgs";
import { GroupByAnswerArgs } from "./args/GroupByAnswerArgs";
import { UpdateAnswerArgs } from "./args/UpdateAnswerArgs";
import { UpdateManyAnswerArgs } from "./args/UpdateManyAnswerArgs";
import { UpsertAnswerArgs } from "./args/UpsertAnswerArgs";
import { Answer } from "../../../models/Answer";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateAnswer } from "../../outputs/AggregateAnswer";
import { AnswerGroupBy } from "../../outputs/AnswerGroupBy";
export declare class AnswerCrudResolver {
    answer(ctx: any, info: GraphQLResolveInfo, args: FindUniqueAnswerArgs): Promise<Answer | null>;
    findFirstAnswer(ctx: any, info: GraphQLResolveInfo, args: FindFirstAnswerArgs): Promise<Answer | null>;
    answers(ctx: any, info: GraphQLResolveInfo, args: FindManyAnswerArgs): Promise<Answer[]>;
    createAnswer(ctx: any, info: GraphQLResolveInfo, args: CreateAnswerArgs): Promise<Answer>;
    createManyAnswer(ctx: any, info: GraphQLResolveInfo, args: CreateManyAnswerArgs): Promise<AffectedRowsOutput>;
    deleteAnswer(ctx: any, info: GraphQLResolveInfo, args: DeleteAnswerArgs): Promise<Answer | null>;
    updateAnswer(ctx: any, info: GraphQLResolveInfo, args: UpdateAnswerArgs): Promise<Answer | null>;
    deleteManyAnswer(ctx: any, info: GraphQLResolveInfo, args: DeleteManyAnswerArgs): Promise<AffectedRowsOutput>;
    updateManyAnswer(ctx: any, info: GraphQLResolveInfo, args: UpdateManyAnswerArgs): Promise<AffectedRowsOutput>;
    upsertAnswer(ctx: any, info: GraphQLResolveInfo, args: UpsertAnswerArgs): Promise<Answer>;
    aggregateAnswer(ctx: any, info: GraphQLResolveInfo, args: AggregateAnswerArgs): Promise<AggregateAnswer>;
    groupByAnswer(ctx: any, info: GraphQLResolveInfo, args: GroupByAnswerArgs): Promise<AnswerGroupBy[]>;
}

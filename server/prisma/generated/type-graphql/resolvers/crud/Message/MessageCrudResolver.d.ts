import { GraphQLResolveInfo } from "graphql";
import { AggregateMessageArgs } from "./args/AggregateMessageArgs";
import { CreateManyMessageArgs } from "./args/CreateManyMessageArgs";
import { CreateMessageArgs } from "./args/CreateMessageArgs";
import { DeleteManyMessageArgs } from "./args/DeleteManyMessageArgs";
import { DeleteMessageArgs } from "./args/DeleteMessageArgs";
import { FindFirstMessageArgs } from "./args/FindFirstMessageArgs";
import { FindManyMessageArgs } from "./args/FindManyMessageArgs";
import { FindUniqueMessageArgs } from "./args/FindUniqueMessageArgs";
import { GroupByMessageArgs } from "./args/GroupByMessageArgs";
import { UpdateManyMessageArgs } from "./args/UpdateManyMessageArgs";
import { UpdateMessageArgs } from "./args/UpdateMessageArgs";
import { UpsertMessageArgs } from "./args/UpsertMessageArgs";
import { Message } from "../../../models/Message";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateMessage } from "../../outputs/AggregateMessage";
import { MessageGroupBy } from "../../outputs/MessageGroupBy";
export declare class MessageCrudResolver {
    message(ctx: any, info: GraphQLResolveInfo, args: FindUniqueMessageArgs): Promise<Message | null>;
    findFirstMessage(ctx: any, info: GraphQLResolveInfo, args: FindFirstMessageArgs): Promise<Message | null>;
    messages(ctx: any, info: GraphQLResolveInfo, args: FindManyMessageArgs): Promise<Message[]>;
    createMessage(ctx: any, info: GraphQLResolveInfo, args: CreateMessageArgs): Promise<Message>;
    createManyMessage(ctx: any, info: GraphQLResolveInfo, args: CreateManyMessageArgs): Promise<AffectedRowsOutput>;
    deleteMessage(ctx: any, info: GraphQLResolveInfo, args: DeleteMessageArgs): Promise<Message | null>;
    updateMessage(ctx: any, info: GraphQLResolveInfo, args: UpdateMessageArgs): Promise<Message | null>;
    deleteManyMessage(ctx: any, info: GraphQLResolveInfo, args: DeleteManyMessageArgs): Promise<AffectedRowsOutput>;
    updateManyMessage(ctx: any, info: GraphQLResolveInfo, args: UpdateManyMessageArgs): Promise<AffectedRowsOutput>;
    upsertMessage(ctx: any, info: GraphQLResolveInfo, args: UpsertMessageArgs): Promise<Message>;
    aggregateMessage(ctx: any, info: GraphQLResolveInfo, args: AggregateMessageArgs): Promise<AggregateMessage>;
    groupByMessage(ctx: any, info: GraphQLResolveInfo, args: GroupByMessageArgs): Promise<MessageGroupBy[]>;
}

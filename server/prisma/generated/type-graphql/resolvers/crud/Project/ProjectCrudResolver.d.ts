import { GraphQLResolveInfo } from "graphql";
import { AggregateProjectArgs } from "./args/AggregateProjectArgs";
import { CreateManyProjectArgs } from "./args/CreateManyProjectArgs";
import { CreateProjectArgs } from "./args/CreateProjectArgs";
import { DeleteManyProjectArgs } from "./args/DeleteManyProjectArgs";
import { DeleteProjectArgs } from "./args/DeleteProjectArgs";
import { FindFirstProjectArgs } from "./args/FindFirstProjectArgs";
import { FindManyProjectArgs } from "./args/FindManyProjectArgs";
import { FindUniqueProjectArgs } from "./args/FindUniqueProjectArgs";
import { GroupByProjectArgs } from "./args/GroupByProjectArgs";
import { UpdateManyProjectArgs } from "./args/UpdateManyProjectArgs";
import { UpdateProjectArgs } from "./args/UpdateProjectArgs";
import { UpsertProjectArgs } from "./args/UpsertProjectArgs";
import { Project } from "../../../models/Project";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateProject } from "../../outputs/AggregateProject";
import { ProjectGroupBy } from "../../outputs/ProjectGroupBy";
export declare class ProjectCrudResolver {
    project(ctx: any, info: GraphQLResolveInfo, args: FindUniqueProjectArgs): Promise<Project | null>;
    findFirstProject(ctx: any, info: GraphQLResolveInfo, args: FindFirstProjectArgs): Promise<Project | null>;
    projects(ctx: any, info: GraphQLResolveInfo, args: FindManyProjectArgs): Promise<Project[]>;
    createProject(ctx: any, info: GraphQLResolveInfo, args: CreateProjectArgs): Promise<Project>;
    createManyProject(ctx: any, info: GraphQLResolveInfo, args: CreateManyProjectArgs): Promise<AffectedRowsOutput>;
    deleteProject(ctx: any, info: GraphQLResolveInfo, args: DeleteProjectArgs): Promise<Project | null>;
    updateProject(ctx: any, info: GraphQLResolveInfo, args: UpdateProjectArgs): Promise<Project | null>;
    deleteManyProject(ctx: any, info: GraphQLResolveInfo, args: DeleteManyProjectArgs): Promise<AffectedRowsOutput>;
    updateManyProject(ctx: any, info: GraphQLResolveInfo, args: UpdateManyProjectArgs): Promise<AffectedRowsOutput>;
    upsertProject(ctx: any, info: GraphQLResolveInfo, args: UpsertProjectArgs): Promise<Project>;
    aggregateProject(ctx: any, info: GraphQLResolveInfo, args: AggregateProjectArgs): Promise<AggregateProject>;
    groupByProject(ctx: any, info: GraphQLResolveInfo, args: GroupByProjectArgs): Promise<ProjectGroupBy[]>;
}
